knitr::opts_knit$set(root.dir = '/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/')
library(terra)
library(tidyverse)
library(tidyterra)
library(randomForest)
library(caret)
library(leaflet)
terraOptions(
memfrac = 0.1
)
filepath <- "Mashel/Mashel_WIP_2024/DataExport"
mas_dtw <- "Mashel/Mashel_WIP_2024/DataExport/Mashel_DTW.tif"
mas_files <- list.files(filepath, pattern = ".tif$", full.names = TRUE) |>
# str_subset(pattern = "^(?!.*flow)") |>
# str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*WIP_2856.tif)") |>
str_subset(pattern = "^(?!.*WIP_Final_2856.tif)") |>
str_subset(pattern = "^(?!.*hillshade_2856.tif)") |>
str_subset(pattern = "2856.tif")
mas_files
mas_rasts <- c(rast(mas_files), rast(mas_dtw), rast("Mashel/Mashel_WIP_2024/DataExport/Mashel_DEM_HUC12_2856_4m_TWI.tif"), rast("Mashel/Mashel_WIP_2024/DataExport/Mashel_DEM_HUC12_2856_4m.tif"))
names(mas_rasts)
names(mas_rasts[[7]]) <- "CHM"
names(mas_rasts[[16]]) <- "DTW"
names(mas_rasts[[17]]) <- "TWI"
names(mas_rasts[[18]]) <- "DEM"
names(mas_rasts)
mas_pts <- vect("Mashel/Mashel_WIP_2024/DataExport/Mashel_NWI_filter_train_pts.shp") |>
project("EPSG:2856")
mas_pts
mas_pts_train <- vect("Mashel/Mashel_WIP_2024/DataExport/Mashel_NWI_filter_train_pts_ext.shp")
mas_pts_train_df <- as.data.frame(mas_pts_train)
mas_pts_train_df
rf_mod_func <- function(points){
set.seed(11)
train.index <- as.vector(sample(c(1:nrow(points)),
0.7*nrow(points), replace=F))
train <- points[train.index, ]
test <- points[-train.index, ]
rf_model <- randomForest(as.factor(class) ~ ., mtry = 10,
sampsize = nrow(train[train$class == "WET",]),
replace = TRUE, #weights = wetwt,
nodesize =1,
ntree = 1000, na.action = na.omit,
importance = TRUE, data = train)
test_predict <- predict(rf_model, newdata = test, type = "response")
cm <- caret::confusionMatrix(test_predict, as.factor(test$class))
return(list(test, rf_model, cm))
}
pred_wip <- rast("Mashel/Mashel_WIP_2024/DataExport/Mashel_NWI_WIP_2856.tif")
plot(pred_wip)
mas_strat_pts_class <- vect("Mashel/Mashel_WIP_2024/DataExport/mas_pred_wip_NWI_stratified_600points_class.shp")
plot(mas_strat_pts_class, "validate", main = "Mashel User Classified Points")
mas_pts_train_2_df <- vect("Mashel/Mashel_WIP_2024/DataExport/mas_strat_pts_class_extmetrics.shp") |> as.data.frame() |> dplyr::rename("class" = "validate")
mas_pts_validate_df <- vect("Mashel/Mashel_WIP_2024/DataExport/mas_pred_wip_NWI_stratified_points_validate_extract.shp") |> as.data.frame() |> dplyr::rename("class" = "validate")
mas_rf_2 <- get(load("Mashel/Mashel_WIP_2024/Model_Export/MAS_RF_Model_Final.RData"))
mas_rf_2
varImpPlot(mas_rf_2)
mas_test_2 <- predict(mas_rf_2, newdata = mas_pts_validate_df, type = "response")
mas_cm_2 <- caret::confusionMatrix(mas_test_2, as.factor(mas_pts_validate_df$class))
mas_cm_2
save(mas_cm_2, file = "Mashel/Mashel_WIP_2024/Model_Export/MAS_RF_Model_Final_ConfMat_stats.rda")
#| cache: true
mas_wip_final <- rast("Mashel/Mashel_WIP_2024/DataExport/Mashel_WIP_Final_2856.tif")[[2]]
pal <- colorNumeric("YlGnBu", values(mas_wip_final),
na.color = "transparent")
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(mas_wip_final, group = "Mashel WIP", colors = pal,
maxBytes = 20630008) |>
addLayersControl(overlayGroups = c("Mashel WIP")) |>
addLegend(pal = pal, values = values(mas_wip_final))
col_files <- list.files("Colville/Colville_WIP_2024/DataExport", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "2855.tif")
# for(i in 1:length(col_files)){
#     r <- rast(col_files[[i]])
#     crs_2855 <- crs(rast(col_files[[1]]))
#     nameClean <- str_extract(col_files[[i]], pattern = "(?<=Export/)(.+)(?=.tif)")
#
#     if(crs(r) != crs_2855){
#         project(r, crs_2855,
#                 filename = paste0("Colville/Colville_WIP_2024/DataExport/",
#                                           nameClean, "_2855", ".tif"))
#     } else {
#         next
#     }
# }
col_files
col_twi <- rast("Colville/Colville_WIP_2024/DataExport/colvilledem_TWI.tif")
col_dtw <- rast("Colville/Colville_WIP_2024/DataExport/Colville_DTW.tif")
names(col_twi) <- "TWI"
names(col_dtw) <- "DTW"
col_rasts <- c(rast(col_files), col_twi, col_dtw)
names(col_rasts[[3]]) <- "DEM"
names(col_rasts)
col_pts <- vect("Colville/Colville_WIP_2024/DataExport/ColvilleNWI_pts_merge.shp")
col_pts
col_pts_train <- terra::extract(col_rasts, col_pts, bind = TRUE, filename = "Colville/Colville_WIP_2024/DataExport/ColvilleNWI_pts_merge_training.gpkg")
col_pts_train_df <- as.data.frame(col_pts_train)
col_pred_wip <- rast("Colville/Colville_WIP_2024/DataExport/Colville_NWI_WIP.tif")
plot(col_pred_wip)
col_strat_pts_valid <- vect("Colville/Colville_WIP_2024/DataExport/col_pred_wip_NWI_stratified_points_validate.shp")
plot(col_strat_pts_valid, "validate", main = "Colville User Classified Points")
col_pts_train_2_df <- vect("Colville/Colville_WIP_2024/DataExport/col_strat_pts_class_extmetrics.shp") |> as.data.frame() |> dplyr::rename("class" = "validate")
col_pts_test_df <- vect("Colville/Colville_WIP_2024/DataExport/col_pred_wip_NWI_stratified_points_test_extract.shp") |> as.data.frame() |> dplyr::rename("class" = "validate")
unique(col_pts_train_2_df$class)
(col_pts_train_2_df[col_pts_train_2_df$class == "WET",])
unique(col_pts_test_df$class)
col_rf_2 <- get(load("Colville/Colville_WIP_2024/Model_Export/COL_RF_Model_Final.RData"))
col_rf_2
varImpPlot(col_rf_2)
col_test_2 <- predict(col_rf_2, newdata = col_pts_test_df, type = "response")
col_cm_2 <- caret::confusionMatrix(col_test_2, as.factor(col_pts_test_df$class))
col_cm_2
save(col_cm_2, file = "Colville/Colville_WIP_2024/Model_Export/COL_RF_Model_Final_ConfMat_stats.rda")
#| cache: true
col_wip_final <- rast("Colville/Colville_WIP_2024/DataExport/Colville_WIP_Final_2855.tif")[[2]]
pal <- colorNumeric("YlGnBu", values(col_wip_final),
na.color = "transparent")
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(col_wip_final, group = "Colville WIP", colors = pal,
maxBytes = 27529326) |>
addLayersControl(overlayGroups = c("Colville WIP")) |>
addLegend(pal = pal, values = values(col_wip_final))
hlef_files <- list.files("HLEF/HLEF WIP/", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "6394.tif")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP/", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*heenorthomosaic)")
hlef_files
hlef_orth <- rast("HLEF/HLEF WIP/heenorthomosaic.tif")
hlef_orth
hlef_L8 <- rast("HLEF/HLEF WIP/LC08_comp2_8.tif")
hlef_L8
names(hlef_L8)
plot(hlef_L8$LC08_comp2_8_1)
plot(hlef_L8$LC08_comp2_8_2)
plot(hlef_L8$LC08_comp2_8_3)
?plotRGB
plotRGB(hlef_L8, r = "LC08_comp2_8_4", g = "LC08_comp2_8_3", b = "LC08_comp2_8_2")
plotRGB(hlef_L8, r = 4, g = 3, b = 2)
nlyr(hlef_L8)
plotRGB(hlef_L8, r = 3, g = 2, b = 1)
hlef_orth
hlef_L8 <- NULL
spatSample(hlef_orth, 1)
?spatSample
p <- buffer(spatSample(hlef_orth, 1, na.rm = TRUE, as.points = TRUE), 100)
p
p <- buffer(spatSample(hlef_orth, 1, na.rm = TRUE, as.points = TRUE, values = F), 100)
p
hlef_orth_crp <- crop(hlef_orth, p)
plot(hlef_orth_crp)
p <- buffer(spatSample(hlef_orth, 1, na.rm = TRUE, as.points = TRUE, values = F), 1000)
p
hlef_orth_crp <- crop(hlef_orth, p)
plot(hlef_orth_crp)
p <- buffer(spatSample(hlef_orth, 1, na.rm = TRUE, as.points = TRUE, values = F), 2000)
hlef_orth_crp <- crop(hlef_orth, p)
hlef_orth_ndvi <- (hlef_orth_crp$heenorthomosaic_4 - hlef_orth_crp$heenorthomosaic_3)/(hlef_orth_crp$heenorthomosaic_4 + hlef_orth_crp$heenorthomosaic_3)
plot(hlef_orth_ndvi)
plot(hlef_orth_crp)
plotRGB(hlef_orth_crp)
plotRGB(hlef_orth_crp, r = 4, g = 1, b = 2)
?plotRGB
hlef_orth_ndvi <- (hlef_orth_crp$heenorthomosaic_4 - hlef_orth_crp$heenorthomosaic_1)/(hlef_orth_crp$heenorthomosaic_4 + hlef_orth_crp$heenorthomosaic_1)
hlef_orth_ndvi
plot(hlef_orth_ndvi)
hlef_orth
?resample
?aggregate
hlef_ex <- rast(hlef_files[[1]])
hlef_ex
set.crs(hlef_ex, "EPSG:6394")
hlef_ex
plot(hlef_ex)
hlef_orth_scl <- resample(hlef_orth, hlef_ex, method = cubicspline)
hlef_orth_scl <- resample(hlef_orth, hlef_ex, method = "cubicspline")
plot(hlef_orth_scl)
plotRGB(hlef_orth_scl)
writeRaster(hlef_orth_scl, "HLEF/HLEF WIP/HLEF_Orthomosaic_5m_scaled.tif")
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*heenorthomosaic)")
hlef_files
hlef_ex <- rast(hlef_files[[1]])
set.crs(hlef_ex, "EPSG:6394")
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*orthomosaic)")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*heenorthomosaic)")|>
str_subset(pattern = "^(?!.*Ortho)") |>
str_subset(pattern = "^(?!.*LC08)") |>
str_subset(pattern = "^(?!.*veghlef210921.tif)")
hlef_files
hlef_ex <- rast(hlef_files)
hlef_ex
hlef_stack <- sapply(hlef_files, function(x) rast(x), set.crs(x, "EPSG:6394"))
hlef_stack <- sapply(hlef_files, function(x) {rast(x) set.crs(x, "EPSG:6394")})
setcrs_fun <- function(x){
y = rast(x)
set.crs(y, "EPSG:6394")
return(y)
}
hlef_stack <- sapply(hlef_files, FUN = setcrs_fun)
hlef_stack
c(hlef_stack)
typeof(hlef_stack)
rast(hlef_stack)
rast("HLEF/HLEF WIP/int_HLEF_120921.tif")
hlef_ex <- rast(hlef_files[[1]])
set.crs(hlef_ex, "EPSG:6394")
rast("HLEF/HLEF WIP/int_HLEF_120921.tif") |> resample(y = hlef_ex,
filename = "HLEF/HLEF WIP/HLEF_Intensity.tif")
rast("HLEF/HLEF WIP/veghlef210921.tif") |> resample(y = hlef_ex,
filename = "HLEF/HLEF WIP/HLEF_CHM_5m_scale.tif")
rast("HLEF/HLEF WIP/HLEF_sentinel_spectral_indices_EPSG_6394.tif") |> resample(y = hlef_ex,
filename = "HLEF/HLEF WIP/HLEF_sentinel_spectral_indices_EPSG_6394_5m.tif")
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*heenorthomosaic)")|>
str_subset(pattern = "^(?!.*Ortho)") |>
str_subset(pattern = "^(?!.*LC08)") |>
str_subset(pattern = "^(?!.*veghlef210921.tif)")
hlef_files
hlef_files <- list.files("HLEF/HLEF WIP", pattern = ".tif$", full.names = TRUE) |>
str_subset(pattern = "^(?!.*flow)") |>
str_subset(pattern = "^(?!.*filled)") |>
str_subset(pattern = "^(?!.*huc.tif)") |>
str_subset(pattern = "^(?!.*RIE)") |>
str_subset(pattern = "^(?!.*heenorthomosaic)")|>
str_subset(pattern = "^(?!.*Ortho)") |>
str_subset(pattern = "^(?!.*LC08)") |>
str_subset(pattern = "^(?!.*veghlef210921.tif)") |>
str_subset(pattern = "^(?!.*HLEF_sentinel_spectral_indices_EPSG_6394.tif)") |>
str_subset(pattern = "^(?!.*int_HLEF_120921.tif)") |>
str_subset(pattern = "^(?!.*veghlef210921_6394)")
hlef_files
setcrs_fun <- function(x){
y = rast(x)
set.crs(y, "EPSG:6394")
return(y)
}
hlef_stack <- sapply(hlef_files, FUN = setcrs_fun)
hlef_stack
rast(hlef_stack)
hlef_stack <- rast(sapply(hlef_files, FUN = setcrs_fun))
hlef_stack
rf_mod_func2
rf_mod_func2 <- function(points, val_points, path){
stopifnot(file.exists(paste0(path, "/",
toupper(str_sub(deparse(substitute(val_points)),1,3)),
"_RF_Model_Final", ".RData"))==FALSE)
set.seed(11)
#train.index <- points
train <- points
test <- val_points
rf_model <- randomForest(as.factor(class) ~ ., mtry = 10,
sampsize = nrow(train[train$class == "WET",]),
replace = TRUE,
nodesize =1,
ntree = 1000, na.action = na.omit,
importance = TRUE, data = train)
test_predict <- predict(rf_model, newdata = test, type = "response")
cm <- caret::confusionMatrix(test_predict, as.factor(test$class))
save(rf_model, file = paste0(path, "/",
toupper(str_sub(deparse(substitute(val_points)),1,3)),
"_RF_Model_Final", ".RData"))
return(list(test_predict, rf_model, cm))
}
hlef_valpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_valpts
hlef_wip_testpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_100pts.shp")
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_wip_testpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_100pts.shp")
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
set.crs("EPSG:6394")
hlef_wip_trainpts_ext
plot(hlef_wip_trainpts_ext)
plot(hlef_stack$`HLEF/HLEF WIP/dev_1000.tif`)
plot(hlef_wip_trainpts_ext, add = T)
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
plot(hlef_wip_trainpts_ext, add = T)
plot(hlef_wip_trainpts_ext)
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_wip_testpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_100pts.shp")
plot(hlef_wip_trainpts_ext)
plot(hlef_wip_trainpts_ext)
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
plot(hlef_wip_trainpts)
hlef_wip_testpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_100pts.shp")
plot(hlef_wip_testpts)
names(hlef_stakc)
names(hlef_stack)
tidyterra::rename_with(hlef_stack, ~gsub("HLEF/HLEF WIP/", "", .x, fixed = TRUE))
hlef_stack
hlef_stack <- tidyterra::rename_with(hlef_stack, ~gsub("HLEF/HLEF WIP/", "", .x, fixed = TRUE))
hlef_stack
writeRaster(hlef_stack, "HLEF/HLEF WIP/HLEF_WIP_Predictor_Stack.tif")
?terra::extract
hlef_wip_trainpts
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack)
hlef_wip_trainpts_ext
hlef_stack <- tidyterra::rename_with(hlef_stack, ~gsub(".tif", "", .x, fixed = TRUE))
names(hlef_stack)
hlef_stack <- tidyterra::rename_with(hlef_stack, ~gsub("HLEF_sentinel_spectral_indices_EPSG_6394_", "Spectral", .x, fixed = TRUE))
names(hlef_stack)
rast("HLEF/HLEF WIP/HLEF_sentinel_spectral_indices_EPSG_6394_5m.tif")
hlef_stack <- tidyterra::rename(
NDVI = Spectral5m_1,
MNDWI = Spectral5m_2,
EVI = Spectral5m_3,
NDYI = Spectral5m_4
)
hlef_stack <- tidyterra::rename(hlef_stack,
NDVI = Spectral5m_1,
MNDWI = Spectral5m_2,
EVI = Spectral5m_3,
NDYI = Spectral5m_4
)
names(hlef_stack)
writeRaster(hlef_stack, "HLEF/HLEF WIP/HLEF_WIP_Predictor_Stack.tif")
writeRaster(hlef_stack, "HLEF/HLEF WIP/HLEF_WIP_Predictor_Stack.tif", overwrite = TRUE)
hlef_wip_trainpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_pts.shp")
hlef_wip_testpts <- vect("HLEF/HLEF WIP Points/HLEF_WIP_2022-2024_revision/HELF_2022-2024_revision_validation_100pts.shp")
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_trainpts_ext
hlef_wip_testpts
hlef_wip_testpts_ext <- hlef_wip_testpts |>
select(CLASS) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN)
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_testpts_ext <- hlef_wip_testpts |>
select(CLASS) |> rename(class = CLASS) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_trainpts_ext
dir.create("/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/HLEF/HLEF WIP/WIP_Export")
#| eval: false
filepath_hlef <- "HLEF/HLEF WIP/WIP_Export"
rf_mod_func2(points = hlef_wip_trainpts_ext, val_points = hlef_wip_testpts_ext, path = filepath_hlef)
col_pts_train_2_df
hlef_wip_testpts_ext <- hlef_wip_testpts |>
select(CLASS) |> rename(class = CLASS) |>
mutate(class = as.factor(class))
hlef_wip_testpts_ext
hlef_wip_trainpts_ext
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN) |>
mutate(class = as.factor(toupper(class)))
hlef_wip_trainpts_ext
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN) |>
mutate(class = as.factor(toupper(class))) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_testpts_ext <- hlef_wip_testpts |>
select(CLASS) |> rename(class = CLASS) |>
mutate(class = as.factor(class)) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
unique(hlef_wip_testpts_ext$class)
unique(hlef_wip_trainpts_ext$class)
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN) |>
mutate(class = as.factor(toupper(class))) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_trainpts_ext <- hlef_wip_trainpts |>
select(CLASSAGAIN) |> rename(class = CLASSAGAIN) |>
mutate(class = as.factor(toupper(class))) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
hlef_wip_testpts_ext <- hlef_wip_testpts |>
select(CLASS) |> rename(class = CLASS) |>
mutate(class = as.factor(class)) |>
set.crs("EPSG:6394") |>
terra::extract(x = hlef_stack, bind = TRUE)
#| eval: false
filepath_hlef <- "HLEF/HLEF WIP/WIP_Export"
hlef_rf_mod <- rf_mod_func2(points = hlef_wip_trainpts_ext, val_points = hlef_wip_testpts_ext, path = filepath_hlef)
hlef_rf_mod
#| eval: false
rf_2 <- hlef_rf_mod[[2]]
test_2 <- hlef_rf_mod[[1]]
cm_2 <- hlef_rf_mod[[3]]
rf_2
cm_2
varImpPlot(rf_2)
rf_2 <- get(load("HLEF/HLEF WIP/WIP_Export/HLEF_RF_Model_Final.RData"))
rf_2 <- get(load("HLEF/HLEF WIP/WIP_Export/HLE_RF_Model_Final.RData"))
rf_2
varImpPlot(rf_2)
test_2 <- predict(rf_2, newdata = pts_test_df, type = "response")
test_2 <- predict(rf_2, newdata = hlef_wip_testpts_ext, type = "response")
cm_2 <- caret::confusionMatrix(test_2, as.factor(hlef_wip_testpts_ext$class))
cm_2
saveRDS(cm_2, file = "HLEF/HLEF WIP/WIP_Export/HLEF_RF_Model_Final_ConfMat_stats.rds")
hlef_wip_map <- terra::predict(hlef_stack, rf_2, type = "prob",
filename = "HLEF/HLEF WIP/WIP_Export/HLEF_WIP_2024.tif",
overwrite = TRUE)
hlef_wip_map
hlef_wip_final <- rast("HLEF/HLEF WIP/WIP_Export/HLEF_WIP_2024.tif")[[2]]
pal <- colorNumeric("YlGnBu", values(hlef_wip_final),
na.color = "transparent")
#| cache: true
hlef_wip_final <- rast("HLEF/HLEF WIP/WIP_Export/HLEF_WIP_2024.tif")[[2]]
pal <- colorNumeric("YlGnBu", values(hlef_wip_final),
na.color = "transparent")
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 275293) |>
addLayersControl(overlayGroups = c("HLEF WIP")) |>
addLegend(pal = pal, values = values(hlef_wip_final))
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 275293) |>
#addLayersControl(overlayGroups = c("HLEF WIP")) |>
addLegend(pal = pal, values = values(hlef_wip_final))
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 8579316) |>
#addLayersControl(overlayGroups = c("HLEF WIP")) |>
addLegend(pal = pal, values = values(hlef_wip_final))
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 8579316) |>
#addLayersControl(overlayGroups = c("HLEF WIP")) |>
addLegend(pal = pal, values = values(hlef_wip_final)) |>
leaflet::addLayersControl()
hlef_wip_final
?leaflet::addLayersControl
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery, group = "Esri Base") |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 8579316) |>
addLegend(pal = pal, values = values(hlef_wip_final)) |>
leaflet::addLayersControl(baseGroups = "Esri Base",
overlayGroups = "HLEF WIP")
leaflet::leaflet() |>
addProviderTiles(providers$Esri.WorldImagery, group = "Esri Base") |>
addRasterImage(hlef_wip_final, group = "HLEF WIP", colors = pal,
maxBytes = 8579316) |>
addLegend(pal = pal, values = values(hlef_wip_final)) |>
leaflet::addLayersControl(baseGroups = "Esri Base",
overlayGroups = "HLEF WIP")
hlef_wip_final
writeRaster(hlef_wip_final, "/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/SOIL CARBON/All_WA/data/Rasters/HLEF_WIP_6394.tif", )
writeRaster(hlef_wip_final, "/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/SOIL CARBON/All_WA/data/Rasters/HLEF_WIP_6394.tif", overwrite =TRUE)
hlef_wip_final <- rast("HLEF/HLEF WIP/WIP_Export/HLEF_WIP_2024.tif")[[2]] |>
rename(WIP = WET)
writeRaster(hlef_wip_final, "/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/SOIL CARBON/All_WA/data/Rasters/HLEF_WIP_6394.tif", overwrite =TRUE)
