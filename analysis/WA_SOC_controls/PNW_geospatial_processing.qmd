---
title: 'Data processing for geospatial predictors'
author: "Anthony Stewart"
output: html_document
---

```{css, echo=FALSE}
pre {
  max-height: 300px;
  overflow-y: auto;
}

h1, h4, h3 {
  text-align: center;
}
```

```{r setup, include=FALSE}
library(formatR)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.show = "hold", time_it = TRUE, dpi = 75)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = T, collapse = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/')
library(terra)
library(aqp)
library(ithir)
library(mpspline2)
library(dplyr)
library(spatialEco)
library(whitebox)
library(stringr)

#setGDALconfig("GDAL_PAM_ENABLED", "FALSE")

terraOptions(
    memfrac = 0.1
)
```

### Raster and Vector data

#### Additional terrain variables

In particular,

-   DEM elevation is a proxy for local climate variation
-   Heat Load Index (HLI) As an estimate of solar radiation intesity
-   landform classification from `geomorphons` is derived using **Whitebox Tools** which implements the algorithm from *Jasiewicz, J., and Stepinski, T. F. (2013). Geomorphons — a pattern recognition approach to classification and mapping of landforms. Geomorphology, 182, 147-156.*
-   


```{r}
#| eval: false
terrain_metrics <- function(DEM, path, studyarea){
  #stopifnot(file.exists(paste0(path, studyarea, "_HLI", ".tif")) ==FALSE)
  # stopifnot(file.exists(paste0(getwd(), "/", path, studyarea, 
  #                              "_geomorphons", ".tif")) == FALSE)
  
  # hli <- spatialEco::hli(DEM, force.hemisphere = "northern")
  # writeRaster(hli, names = "HLI",
  #             paste0(path, studyarea, "_HLI", ".tif"),
  #             overwrite = TRUE)
  
  # geomorphons
  if(str_detect(deparse(substitute(DEM)), "hlef")){
    wbt_geomorphons(
      dem = sources(DEM),
      output = paste0(getwd(), "/", path, studyarea, "_geomorphons", ".tif"),
      search =  100, 
      threshold = 3, 
      fdist = 100, 
      skip = 10
    )
  } else {
  whitebox::wbt_geomorphons(
    dem = sources(DEM),
    output = paste0(getwd(), "/", path, studyarea, "_geomorphons", ".tif"),
    search = 125,
    threshold = 3,
    fdist = 125,
    skip = 12
  )
  }
}


```

```{r}
#| eval: false
path <- "SOIL CARBON/All_WA/data/Rasters/"
hlef_dem <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_DTM_EPSG_6394.tif") 
col_dem <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_dem_huc2855.tif")
mas_dem <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_DEM_HUC12_2856_4m.tif")
hoh_dem <- rast("SOIL CARBON/All_WA/data/Rasters/hoh_dem_2855.tif")
```


```{r}
#| eval: false
terrain_metrics(hlef_dem, path, "HLEF")
terrain_metrics(col_dem, path, "Colville")
terrain_metrics(mas_dem, path, "Mashel")
terrain_metrics(hoh_dem, path, "Hoh")
```


#### Geomorphons specific classification
```{r}
#| eval: false
geomorph_names <- data.frame(
  value = seq(1,10,1),
  landform = c("Flat", "Peak", "Ridge", "Shoulder", "Spur", 
               "Slope", "Hollow", "Footslope", "Valley", "Depression")
)
geomorph_names_sub <- data.frame(
  value = c(1,2,2,2,3,4,5,6,7,8),
  landform = c("Flat", "Ridge", "Ridge", "Ridge", "Spur", 
               "Slope", "Hollow", "Footslope", "Valley", "Depression")
)


```


#### Other Geospatial Predictors

```{r}
#| eval: false
hlef_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/HLEF_Polygon_EPSG_6394.gpkg")
col_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/ColvilleHUC_2855.shp") 
mas_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/Mashel_HUC12_2856.shp")
hoh_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/HOH_POLYGON_711.shp")
```

#### Lithology from the Washington Dept. of Natural Resources 


```{r}
#| eval: false
hlef_lith_source <- vect("HLEF/Geology/HLEF_Lithology_classified.gpkg") 
hoh_litho_source <- vect("SOIL CARBON/All_WA/data/Vectors/Hoh_geology.shp")
mas_litho_source <- vect("SOIL CARBON/All_WA/data/Vectors/Mashel_geology.shp")
col_litho_source <- vect("SOIL CARBON/All_WA/data/Vectors/Colville_geology.shp")

hlef_consolidate_litho <- hlef_lith_source |> 
  tidyterra::mutate(LITH = case_when(str_detect(HLEF_LITH, 
        "Glacier") ~ NA,
         str_detect(HLEF_LITH, "outwash") ~ "glacial outwash",
         str_detect(HLEF_LITH,
                    "Quaternary") ~ "unconsolidated",
         str_detect(HLEF_LITH, "Slate") ~ "sedimentary",
         str_detect(HLEF_LITH, "Metavolcanic|Tcp|TKts") ~ "igneous",
         str_detect(HLEF_LITH, "Tonalite") ~ "metamorphic",
                                    .default = HLEF_LITH)) |>
  select(LITH) |> project("EPSG:6394")

hoh_consolidate_litho <- hoh_litho_source |> 
  tidyterra::mutate(LITH = case_when(str_detect(LITHOLOGY, 
        "till|drift|glacial deposits|glaciolacustrine") ~ "glacial till and drift",
         str_detect(LITHOLOGY, "outwash") ~ "glacial outwash",
         str_detect(LITHOLOGY,
                    "tectonic|alluvium|water|mass-wasting|dune") ~ "unconsolidated",
                                     str_detect(LITHOLOGY, "sedimentary|sandstone") ~ "sedimentary",
                                     str_detect(LITHOLOGY, "tuff|volcanic|andesite|basalt") ~ "igneous",
                                     str_detect(LITHOLOGY, "amphibolite|marble|gneiss|quartz|mafic|migmatite|schist|dacite|metacarbonate") ~ "metamorphic",
                                    .default = LITHOLOGY)) |>
  select(LITH)

mas_consolidate_litho <- mas_litho_source |> 
  tidyterra::mutate(LITH = case_when(str_detect(LITHOLOGY, "till|drift|glacial deposits|glaciolacustrine") ~ "glacial till and drift",
                                     str_detect(LITHOLOGY, "outwash") ~ "glacial outwash",
                                     str_detect(LITHOLOGY, "tectonic|alluvium|water|mass-wasting|dune") ~ "unconsolidated",
                                     str_detect(LITHOLOGY, "sedimentary|sandstone") ~ "sedimentary",
                                     str_detect(LITHOLOGY, "tuff|volcanic|andesite|basalt") ~ "igneous",
                                     str_detect(LITHOLOGY, "amphibolite|marble|gneiss|quartz|mafic|migmatite|schist|dacite|metacarbonate") ~ "metamorphic",
                                    .default = LITHOLOGY)) |>
  select(LITH)
col_consolidate_litho <- col_litho_source |> 
  tidyterra::mutate(LITH = case_when(str_detect(LITHOLOGY, "till|drift|glacial deposits|glaciolacustrine") ~ "glacial till and drift",
                                     str_detect(LITHOLOGY, "outwash") ~ "glacial outwash",
                                     str_detect(LITHOLOGY, "tectonic|alluvium|water|mass-wasting|dune") ~ "unconsolidated",
                                     str_detect(LITHOLOGY, "sedimentary|sandstone") ~ "sedimentary",
                                     str_detect(LITHOLOGY, "tuff|volcanic|andesite|basalt") ~ "igneous",
                                     str_detect(LITHOLOGY, "amphibolite|marble|gneiss|quartz|mafic|migmatite|schist|dacite|metacarbonate|monzo") ~ "metamorphic",
                                    .default = LITHOLOGY)) |>
  select(LITH)

plot(hlef_consolidate_litho, "LITH")
plot(hoh_consolidate_litho, "LITH")
plot(mas_consolidate_litho, "LITH")
plot(col_consolidate_litho, "LITH")

writeVector(hlef_consolidate_litho, "SOIL CARBON/All_WA/data/Vectors/HLEF_lithology_consolidate.gpkg",overwrite = TRUE)
writeVector(hoh_consolidate_litho, "SOIL CARBON/All_WA/data/Vectors/Hoh_lithology_consolidate.gpkg",overwrite = TRUE)
writeVector(mas_consolidate_litho, "SOIL CARBON/All_WA/data/Vectors/Mas_lithology_consolidate.gpkg",overwrite = TRUE)
writeVector(col_consolidate_litho, "SOIL CARBON/All_WA/data/Vectors/Col_lithology_consolidate.gpkg",overwrite = TRUE)
```


<!-- Consolidate the levels in Geologic age to be more broad because our samples did not cover some categories  -->

<!-- - Quaternary -->
<!--   - Quaternary -->
<!--   - Present  -->
<!-- - Pleistocene -->
<!--   - Pleistocene -->
<!-- - Miocene -->
<!--   - Miocene,  -->
<!--   - Miocene-Oligocene -->
<!--   - Miocene, middle to upper -->
<!-- - Eocene -->
<!--   - Miocene-Eocene -->
<!--   - Eocene -->
<!--   - Oligocene-Eocene -->
<!-- - PreTertiary -->
<!--   - Triassic-Permian -->
<!--   - pre-Tertiary -->
<!--   - Permian -->



```{r}
#| eval: false
hoh_litholevels <- vect("SOIL CARBON/All_WA/data/Vectors/Hoh_lithology_consolidate.shp") |>
   tidyterra::select(LITH)
mas_litholevels <- vect("SOIL CARBON/All_WA/data/Vectors/Mas_lithology_consolidate.shp")|>
   tidyterra::select(LITH) 
col_litholevels <- vect("SOIL CARBON/All_WA/data/Vectors/Col_lithology_consolidate.shp")|>
   tidyterra::select(LITH)

```


Create Rasters from Geology

```{r}
#| eval: false
hlef_lith_rast <- vect("SOIL CARBON/All_WA/data/Vectors/HLEF_lithology_consolidate.gpkg") |>
  terra::rasterize(y = hlef_dem, field = "LITH", touches = TRUE, filename = "SOIL CARBON/All_WA/data/Rasters/HLEF_lithology.tif", overwrite = TRUE)

hoh_lith_rast <- vect("SOIL CARBON/All_WA/data/Vectors/Hoh_lithology_consolidate.shp") |>
  terra::rasterize(y = hoh_dem, field = "LITH", touches = TRUE, filename = "SOIL CARBON/All_WA/data/Rasters/Hoh_lithology.tif", overwrite = TRUE)

mas_lith_rast <- vect("SOIL CARBON/All_WA/data/Vectors/Mas_lithology_consolidate.shp")|>
  terra::rasterize(y = mas_dem, field = "LITH", touches = TRUE, filename = "SOIL CARBON/All_WA/data/Rasters/Mashel_lithology.tif", overwrite = TRUE)

col_lith_rast <- vect("SOIL CARBON/All_WA/data/Vectors/Col_lithology_consolidate.shp") |>
  terra::rasterize(y = col_dem, field = "LITH", touches = TRUE, filename = "SOIL CARBON/All_WA/data/Rasters/Colville_lithology.tif", overwrite = TRUE)


```


```{r}
#| eval: false
hlef_lith_rast <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_lithology.tif")
hoh_lith_rast <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_lithology.tif")
mas_lith_rast <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_lithology.tif")
col_lith_rast <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_lithology.tif")

```


#### Spectral metrics from Sentinel-2. The median reflectance over summer months (July-Sept) from 2018-2023 
    -   NDVI
    -   MNDWI
    -   NDYI
    -   EVI
    
```{r}
#| eval: false
spectral_mosaic <- rast("SOIL CARBON/All_WA/data/Rasters/Sentinel2_mosaic.tif")

col_spectral <- crop(spectral_mosaic, project(col_studyarea, spectral_mosaic), mask = TRUE) |> project("EPSG:2855") |> writeRaster("SOIL CARBON/All_WA/data/Rasters/Colville_spectral.tif", overwrite = TRUE)
mas_spectral <- crop(spectral_mosaic, project(mas_studyarea, spectral_mosaic), mask = TRUE) |> project("EPSG:2856") |> writeRaster("SOIL CARBON/All_WA/data/Rasters/Mashel_spectral.tif", overwrite = TRUE)
hoh_spectral <- crop(spectral_mosaic, project(hoh_studyarea, spectral_mosaic), mask = TRUE) |> project("EPSG:2855") |> writeRaster("SOIL CARBON/All_WA/data/Rasters/Hoh_spectral.tif", overwrite = TRUE)
```

```{r}
#| eval: false
hlef_spectral <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_sentinel_spectral_indices_EPSG_6394.tif") 
```


#### Canopy Height
- This can be used as a resolution reference for resampling

```{r fig.show='hold', out.width="30%"}
#| eval: false
hlef_chm <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_Canopy_Height_6394.tif")
hoh_chm <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_CanopyHeight_2855.tif") 
mas_chm <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_CanopyHeight_2856.tif") 
col_chm <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_CanopyHeight_2856.tif") 


plot(hlef_chm)
plot(hoh_chm) 
plot(mas_chm)
plot(col_chm) 
```

#### Climate data from WorldClim

- Use CHM as reference

```{r}
#| eval: false



e <- ext(-139.140597463742, -123.103630597976, 49.6177741019178, 62.1684438229526)
hlef_buff <- buffer(hlef_studyarea, 10000)

ak_map <- rast("Climate Data/AK_MAP_1981_2010.tif") |> project(crs(hlef_buff)) |> crop(y = hlef_buff)
ak_mat <- rast("Climate Data/AK_MAT_1981_2010.tif") |> project(crs(hlef_buff)) |> crop(y = hlef_buff)

prism_ppt <- rast("PRISM_Climate/PRISM_ppt_30yr_normal_800mM4_annual_asc/PRISM_ppt_30yr_normal_800mM4_annual_asc.asc")
prism_temp <- rast("PRISM_Climate/PRISM_tmean_30yr_normal_800mM4_annual_asc/PRISM_tmean_30yr_normal_800mM4_annual_asc.asc")


global_pet <- rast("Climate Data/Global-AI_ET0_v3_annual/et0_v3_yr.tif") |> 
  crop(y = ext(prism_ppt)) |> 
  terra::resample(y = prism_ppt)
global_map <- rast("Climate Data/wc2.1_30s_bio/wc2.1_30s_bio_12.tif")
global_mat <- rast("Climate Data/wc2.1_30s_bio/wc2.1_30s_bio_12.tif")
global_mat_c <- rast("Climate Data/wc2.1_30s_bio/wc2.1_30s_bio_11.tif")
global_mat_w <- rast("Climate Data/wc2.1_30s_bio/wc2.1_30s_bio_10.tif")

ak_pet <- rast("Climate Data/Global-AI_ET0_v3_annual/et0_v3_yr.tif") |> 
  crop(ext(e)) |> project(crs(hlef_buff)) |> crop(hlef_buff) |> resample(ak_map)

ak_clim_stack <- c(ak_map, ak_mat, ak_pet)
names(ak_clim_stack) <- c("MAP", "MAT", "PET")

clim_stack <- c(prism_ppt, prism_temp, global_pet)
names(clim_stack) <- c("MAP", "MAT", "PET")

writeRaster(clim_stack, "SOIL CARBON/All_WA/data/Rasters/Climate_Stack_Prism_PET.tif", overwrite = T)
writeRaster(ak_clim_stack, "SOIL CARBON/All_WA/data/Rasters/AK_Climate_Stack_Prism_PET.tif", overwrite = T)
```


```{r}
#| eval: false

ak_clim_stack <- rast("SOIL CARBON/All_WA/data/Rasters/AK_Climate_Stack_Prism_PET.tif")
clim_stack <- rast("SOIL CARBON/All_WA/data/Rasters/Climate_Stack_Prism_PET.tif")

#wa_clim_prj <- project(clim_stack, "EPSG:4326")
mas_studyareabuff <- buffer(terra::aggregate(mas_studyarea), 1000)

hlef_clim <- ak_clim_stack |> crop(hlef_studyarea, mask = T) |> 
  resample(y = hlef_dem, method = "bilinear") |> 
  mask(mask = hlef_dem, filename = "SOIL CARBON/All_WA/data/Rasters/hlef_climate_data.tif", overwrite = TRUE)

hoh_clim <- crop(clim_stack, project(hoh_studyarea, "EPSG:4326")) |> 
  project("EPSG:2855") |>
  crop(y = project(hoh_studyarea, "EPSG:2855"), mask = TRUE) |> 
  resample(y = hoh_chm) |> 
  mask(mask = hoh_chm, filename = "SOIL CARBON/All_WA/data/Rasters/hoh_climate_data.tif", overwrite = TRUE)

mas_clim <- crop(clim_stack, project(mas_studyareabuff, "EPSG:4326"), touches = F, extend = TRUE) |> 
  project("EPSG:2856") |>
  crop(y = project(mas_studyarea, "EPSG:2856"), mask = TRUE) |> 
  resample(y = mas_chm) |> 
  mask(mask = mas_chm, filename = "SOIL CARBON/All_WA/data/Rasters/mashel_climate_data.tif", overwrite = TRUE)

col_clim <- crop(clim_stack, project(col_studyarea, "EPSG:4326")) |> 
  project("EPSG:2855") |>
  crop(y = project(col_studyarea, "EPSG:2855"), mask = TRUE) |> 
  resample(y = col_chm) |> 
  mask(mask = col_chm, filename = "SOIL CARBON/All_WA/data/Rasters/colville_climate_data.tif", overwrite = TRUE)
```

```{r}
#| eval: false

hlef_clim <- rast("SOIL CARBON/All_WA/data/Rasters/hlef_climate_data.tif")
hoh_clim <- rast("SOIL CARBON/All_WA/data/Rasters/hoh_climate_data.tif")
mas_clim <- rast("SOIL CARBON/All_WA/data/Rasters/mashel_climate_data.tif")
col_clim <- rast("SOIL CARBON/All_WA/data/Rasters/colville_climate_data.tif")

hlef_clim
hoh_clim
mas_clim
col_clim
```


#### LANDFIRE existing vegetation type 

From Yu et al., 2021:
- “Eleven vegetation types defined from the National Land Cover Database and provided by NEON were binned into four broad types based on preliminary analyses: 
  - deciduous/evergreen/mixed forest (hereafter forest),
  - grassland-herbaceous/pasture-hay/shrub-scrub/dwarf-scrub (grassland/shrubland), 
  - cultivated crops (cropland), and 
  - emergent herbaceous wetlands/sedge herbaceous/woody wetlands (wetland).” 
  
  ([Yu et al., 2021, p. 4](zotero://select/library/items/Q2EDH8L3)) ([pdf](zotero://open-pdf/library/items/2KX4MEH4?page=4&annotation=3KPFC9NZ))


#### NLCD Vegetation

```{r}
#| eval: false

ak_nlcd <- rast("NLCD/2011/NLCD_2011_Land_Cover_AK_20200724/NLCD_2011_Land_Cover_AK_20200724.img")

# c_ak_nlcd <- crop(ak_nlcd, hlef_buff |> project(crs(ak_nlcd)))
# c_ak_nlcdp <- project(c_ak_nlcd, crs(hlef_dem), mask = T, method = "near")
# c_ak_nlcdp_r <- resample(x = c_ak_nlcdp, y = hlef_dem)
# c_ak_nlcdp_rm <- mask(c_ak_nlcdp_r, hlef_dem)

ak_nlcd_cats <- data.frame(cats(ak_nlcd)) |> filter(Histogram >= 0) |>
  dplyr::select(value, NLCD.Land.Cover.Class)

nlcd2011 <- rast("NLCD/2011/nlcd_2011_land_cover_l48_20210604/nlcd_2011_land_cover_l48_20210604.img")

nlcd_cats <- data.frame(cats(nlcd2011)) |> filter(Histogram >= 0) |>
  dplyr::select(value, NLCD.Land.Cover.Class)

nlcd2011_hlef <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/HLEF_NLCD_raw.tif") #|> subst(from = ak_nlcd_cats$value, to = ak_nlcd_cats$NLCD.Land.Cover.Class, raw = TRUE)

nlcd2011_hoh <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/Hoh_NLCD_raw.tif") |>
  subst(from = nlcd_cats$value, to = nlcd_cats$NLCD.Land.Cover.Class, raw = TRUE)
nlcd2011_mas <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/Mas_NLCD_raw.tif") |>
  subst(from = nlcd_cats$value, to = nlcd_cats$NLCD.Land.Cover.Class, raw = TRUE)
nlcd2011_col <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/Col_NLCD_raw.tif")|>
  subst(from = nlcd_cats$value, to = nlcd_cats$NLCD.Land.Cover.Class, raw = TRUE)
```


```{r}
#| eval: false

nlcd_reclass_func <- function(rast, name){
  reclass_rast <- rast |> 
    mutate(nlcd_reclass = case_when(
      str_detect(value, 
                 pattern = regex("Shrub", 
                                        ignore_case = T)) ~ "ShrubScrub",
      str_detect(value, 
                 pattern = regex("Crops|Hay|Pasture|Emergent", 
                                        ignore_case = T)) ~ "Herbaceous",
      str_detect(value, 
                 pattern = regex("woody", 
                                        ignore_case = T)) ~ "Mixed Forest",
      str_detect(value, 
                 pattern = regex("Sparse|barren|snow", 
                                        ignore_case = T)) ~ "Sparse",
      str_detect(value, 
                 pattern = regex("developed|urban", 
                                        ignore_case = T)) ~ "Urban",
      .default = value)) |>
    tidyterra::select(nlcd_reclass)
  
  writeRaster(reclass_rast, 
              paste0("SOIL CARBON/All_WA/data/Rasters/", 
                                   name, "_nlcd_reclass", ".tif"), 
              overwrite = TRUE)
  return(reclass_rast)
}

nlcd_reclass_func_hlef <- function(rast, name){
  reclass_rast <- rast |> 
    mutate(nlcd_reclass = case_when(
      str_detect(`NLCD Land Cover Class`, 
                 pattern = regex("Shrub", 
                                        ignore_case = T)) ~ "ShrubScrub",
      str_detect(`NLCD Land Cover Class`, 
                 pattern = regex("Crops|Hay|Pasture|Emergent", 
                                        ignore_case = T)) ~ "Herbaceous",
      str_detect(`NLCD Land Cover Class`, 
                 pattern = regex("woody", 
                                        ignore_case = T)) ~ "Mixed Forest",
      str_detect(`NLCD Land Cover Class`, 
                 pattern = regex("Sparse|barren|snow", 
                                        ignore_case = T)) ~ "Sparse",
      str_detect(`NLCD Land Cover Class`, 
                 pattern = regex("developed|urban", 
                                        ignore_case = T)) ~ "Urban",
      .default = `NLCD Land Cover Class`)) |>
    tidyterra::select(nlcd_reclass)
  
  writeRaster(reclass_rast, 
              paste0("SOIL CARBON/All_WA/data/Rasters/", 
                                   name, "_nlcd_reclass", ".tif"), 
              overwrite = TRUE)
  return(reclass_rast)
}
```


```{r}
 #| eval: false

nlcd2011_hlef_rc <- nlcd_reclass_func_hlef(nlcd2011_hlef, "HLEF")
nlcd2011_hoh_rc <- nlcd_reclass_func(nlcd2011_hoh, "Hoh")
nlcd2011_mas_rc <- nlcd_reclass_func(nlcd2011_mas, "Mashel")
nlcd2011_col_rc <- nlcd_reclass_func(nlcd2011_col, "Colville")

nlcd_cats_hlef <- data.frame(cats(nlcd2011_hlef_rc)[[1]])
nlcd_cats_hoh <- data.frame(cats(nlcd2011_hoh_rc)[[1]])
nlcd_cats_mas <- data.frame(cats(nlcd2011_mas_rc)[[1]])
nlcd_cats_col <- data.frame(cats(nlcd2011_col_rc)[[1]])

write.csv(nlcd_cats_hlef, "SOIL CARBON/All_WA/data/dataframes/nlcd_cats_hlef.csv")
write.csv(nlcd_cats_hoh, "SOIL CARBON/All_WA/data/dataframes/nlcd_cats_hoh.csv")
write.csv(nlcd_cats_mas, "SOIL CARBON/All_WA/data/dataframes/nlcd_cats_mas.csv")
write.csv(nlcd_cats_col, "SOIL CARBON/All_WA/data/dataframes/nlcd_cats_col.csv")
```


```{r}
#| eval: false

nlcd_cats_hlef <- read.csv("SOIL CARBON/All_WA/data/dataframes/nlcd_cats_hlef.csv")
nlcd_cats_hoh<- read.csv("SOIL CARBON/All_WA/data/dataframes/nlcd_cats_hoh.csv")
nlcd_cats_mas<- read.csv("SOIL CARBON/All_WA/data/dataframes/nlcd_cats_mas.csv")
nlcd_cats_col<- read.csv("SOIL CARBON/All_WA/data/dataframes/nlcd_cats_col.csv")

nlcd2011_hlef_rc_v <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_nlcd_reclass.tif") #|> 
  #subst(from = nlcd_cats_hlef$value, to = nlcd_cats_hlef$label)
nlcd2011_hoh_rc_v <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_nlcd_reclass.tif") |> 
  subst(from = nlcd_cats_hoh$value, to = nlcd_cats_hoh$label)
nlcd2011_mas_rc_v <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_nlcd_reclass.tif")|> 
  subst(from = nlcd_cats_mas$value, to = nlcd_cats_mas$label)
nlcd2011_col_rc_v <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_nlcd_reclass.tif")|> 
  subst(from = nlcd_cats_col$value, to = nlcd_cats_col$label)
```




#### WIP or The **Wetland Intrinsic Potential** (WIP) 

Derived from implementing the methodology described in *Halabisky, Meghan, Dan Miller, Anthony J. Stewart, Amy Yahnke, Daniel Lorigan, Tate Brasel, and Ludmila Monika Moskal. “The Wetland Intrinsic Potential Tool: Mapping Wetland Intrinsic Potential through Machine Learning of Multi-Scale Remote Sensing Proxies of Wetland Indicators.” Hydrology and Earth System Sciences 27, no. 20 (October 20, 2023): 3687–99. <https://doi.org/10.5194/hess-27-3687-2023>.*

The  WIP of the Hoh River Watershed is taken from Halabisky et al., 2023. Colville and Mashel WIP models were derived using the same approach and shown in the R-Quarto Document `All_WA_WIP_revision.qmd`

#### Non-predictor geospatial data

National wetland condition assessment (NWCA) mapping dataset from Uhran et al., 2021

```{r}
#| eval: false


CONUS_NWCA_Mean <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Mean.tif")
CONUS_NWCA_Max <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Max.tif")
CONUS_NWCA_Min <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Max.tif")

NWCA_extract <- function(CONUS_NWCA_raster, studyarea, ref_raster, path, type){
  name <- str_extract(deparse(substitute(studyarea)), "hoh|mas|col")
  type <- tools::toTitleCase(type)
  
  studyarea_prj <- project(studyarea, CONUS_NWCA_raster)
  
  NWCA <- crop(CONUS_NWCA_raster, studyarea_prj, mask = TRUE) |>
  project(y = ref_raster, threads = TRUE,
          filename = paste0(path, "NonPredictors/", name, "_NWCA_Full_", type, ".tif"),
          overwrite = TRUE)
  return(NWCA)
}

hoh_NWCA <- NWCA_extract(CONUS_NWCA_Mean, hoh_studyarea, hoh_chm, path, "Mean")
mas_NWCA <- NWCA_extract(CONUS_NWCA_Mean, mas_studyarea, mas_chm, path, "Mean")
col_NWCA <- NWCA_extract(CONUS_NWCA_Mean, col_studyarea, col_chm, path, "Mean")

hoh_NWCA <- NWCA_extract(CONUS_NWCA_Max, hoh_studyarea, hoh_chm, path, "Max")
mas_NWCA <- NWCA_extract(CONUS_NWCA_Max, mas_studyarea, mas_chm, path, "Max")
col_NWCA <- NWCA_extract(CONUS_NWCA_Max, col_studyarea, col_chm, path, "Max")

hoh_NWCA <- NWCA_extract(CONUS_NWCA_Min, hoh_studyarea, hoh_chm, path, "Min")
mas_NWCA <- NWCA_extract(CONUS_NWCA_Min, mas_studyarea, mas_chm, path, "Min")
col_NWCA <- NWCA_extract(CONUS_NWCA_Min, col_studyarea, col_chm, path, "Min")
```



### Raster Stack Processing

- Resample to resolution of WIP output maps 

```{r}
#| eval: false
hlef_wip <- rast("SOIL CARBON/All_WA/data/Rasters/HLEF_WIP_6394.tif")
col_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_WIP_Final_2855.tif")[[2]]
mas_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_WIP_Final_2856.tif")[[2]]
hoh_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_WIP_Final_2855.tif")
```

#### Topo data from WIP 
```{r}
#| eval: false
#| include: false
#| 
topo_resample_write <- function(topo_path, WIP, Watershed, rastpath){
  filelist <- list.files(topo_path, 
                         pattern = "*.tif", full.names = TRUE,
                         ignore.case = TRUE,
                         include.dirs = FALSE) |> 
  str_subset(pattern = "grad|dev") |>
  str_subset(pattern = "_50.tif|_300.tif|_1000.tif") |> 
  str_subset(pattern = "^(?!.*xml)") |> 
  str_subset(pattern = "^(?!.*ovr)")
  
  f <- lapply(filelist, terra::rast)

  rs <- list()
  for (i in 1:length(f)) {
    if(res(f[[i]])[[1]] != res(WIP)[[1]]){
      rs[[i]] <- resample(f[[i]], WIP, method='near',
                         threads=TRUE) 
    } else {
      rs[[i]] <- f[[i]]
    }
  }

  s <- rast(rs) 
  set.crs(s, crs(WIP))
  s <- terra::project(s, crs(WIP), method = "near", filename = paste0(getwd(),
                               "/",
                               rastpath,
                               Watershed,
                               "_TopoStack",
                               ".tif"), overwrite = TRUE)
}
```

```{r}
#| eval: false
list.files("HLEF/HLEF WIP", 
                        pattern = "*.tif", full.names = TRUE,
                        ignore.case = TRUE,
                        include.dirs = FALSE) |> 
 str_subset(pattern = "grad|dev") |>
 str_subset(pattern = "_50.tif|_300.tif|_1000.tif") |> 
 str_subset(pattern = "^(?!.*xml)") |> 
 str_subset(pattern = "^(?!.*ovr)")
```


```{r}
#| eval: false
#| include: false


rastpath <- "SOIL CARBON/All_WA/data/Rasters"

topo_resample_write(topo_path = "HLEF/HLEF WIP", WIP = hlef_wip, Watershed = "HLEF", rastpath = rastpath)

topo_resample_write(topo_path = "WIP/Hoh_data/TopoIndices/", WIP = hoh_wip, Watershed = "Hoh", rastpath = rastpath)

topo_resample_write(topo_path = "Mashel/Mashel_WIP_2024/DataExport/", WIP = mas_wip, Watershed = "Mashel", rastpath = rastpath)

topo_resample_write(topo_path = "Colville/Colville_WIP_2024/DataExport/", WIP = col_wip, Watershed = "Colville", rastpath = rastpath)

```

#### Predictor stack resampling

```{r}
#| eval: false

stack_resampling <- function(Watershed, WIP, path) {
            
  filelist <- list.files("SOIL CARBON/All_WA/data/Rasters", 
                         pattern = Watershed, full.names = TRUE,
                         ignore.case = TRUE,
                         include.dirs = FALSE) |> 
              str_subset(pattern = "^(?!.*flood)") |>
              str_subset(pattern = "^(?!.*aux.xml)") |>
              str_subset(pattern = "^(?!.*Mask.tif)") |>
              str_subset(pattern = "^(?!.*hillshade)") |>
              str_subset(pattern = "^(?!.*slpasp)") |>
              str_subset(pattern = "^(?!.*fullmodel_v08)")
  f <- lapply(filelist, terra::rast)
  
  rs <- list()
  for (i in 1:length(f)) {
    if(is.na(crs(f[[i]], describe = TRUE)$code)){
      set.crs(f[[i]], crs(WIP))
      rs[[i]] <- resample(f[[i]], WIP, method='near', 
                         threads=TRUE)
    } else if(res(f[[i]])[[1]] != res(WIP)[[1]]){
      rs[[i]] <- resample(f[[i]], WIP, method='near', 
                         threads=TRUE)
    } else if(crs(f[[i]], describe = TRUE)$code != crs(WIP, describe = TRUE)$code){
      rs[[i]] <- project(f[[i]], WIP, method = "near")
    }  else {
      rs[[i]] <- f[[i]]
    }
  }
  
  s <- rast(rs)
  writeRaster(s, paste0(getwd(), 
                               "/", 
                               path, 
                               Watershed, 
                               "_PredictorStack", 
                               ".tif"), overwrite = TRUE)
  return(s)
}

```


```{r}
#| eval: false


l <- list.files("SOIL CARBON/All_WA/data/Rasters", 
                         pattern = "HLEF", full.names = TRUE,
                         ignore.case = TRUE,
                         include.dirs = FALSE) |> 
              str_subset(pattern = "^(?!.*flood)") |>
              str_subset(pattern = "^(?!.*aux.xml)") |>
              str_subset(pattern = "^(?!.*Mask.tif)") |>
              str_subset(pattern = "^(?!.*hillshade)") |>
              str_subset(pattern = "^(?!.*slpasp)") |>
              str_subset(pattern = "^(?!.*fullmodel_v08)")
l

```

Stack all rasters within a study area by resampling to the same resolution. Most of them should be the same but the part will check

```{r}
#| eval: false

predpath <- "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/"
hlef_stack <- stack_resampling("HLEF", hlef_wip, predpath)
hoh_stack <- stack_resampling("Hoh", hoh_wip, predpath)
mas_stack <- stack_resampling("Mashel", mas_wip, predpath)
col_stack <- stack_resampling("Colville", col_wip, predpath)

```

Review stacks and rename some bands. Particularly WET -> WIP

```{r}
#| eval: false

hlef_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/HLEF_PredictorStack.tif") |>
  tidyterra::rename(DTM = HLEF_DEM_5m,
                    #WIP = "SEAK_WIP_9-10-2021_output",
                    geomorphons = HLEF_geomorphons,
                    CHM = veghlef210921) 
hlef_stack$geomorphons <- terra::subst(hlef_stack$geomorphons, 
                                       from = geomorph_names$value,
                                       to = geomorph_names_sub$value)
levels(hlef_stack$geomorphons) <- geomorph_names_sub |> distinct()
writeRaster(hlef_stack, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/HLEF_PredictorStack_Class.tif", overwrite = TRUE)

hoh_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Hoh_PredictorStack.tif") |>
  tidyterra::rename(DTM = hoh_dtm_resamp_7_23,
                    geomorphons = Hoh_geomorphons,
                    WIP = WET,
                    CHM = Hoh_CanopyHeight) 
hoh_stack$geomorphons <- terra::subst(hoh_stack$geomorphons, 
                                       from = geomorph_names$value,
                                       to = geomorph_names_sub$value)
levels(hoh_stack$geomorphons) <- geomorph_names_sub |> distinct()
writeRaster(hoh_stack, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Hoh_PredictorStack_Class.tif", overwrite = TRUE)
  
mas_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Mashel_PredictorStack.tif") |> tidyterra::select(-UPL) |>
  tidyterra::rename(DTM = Band_1,
                    geomorphons = Mashel_geomorphons,
                    WIP = WET,
                    CHM = lewis_2009_dsm_46)
mas_stack$geomorphons <- terra::subst(mas_stack$geomorphons, 
                                       from = geomorph_names$value,
                                       to = geomorph_names_sub$value)
levels(mas_stack$geomorphons) <- geomorph_names_sub |> distinct()
writeRaster(mas_stack, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Mas_PredictorStack_Class.tif", overwrite = TRUE)

col_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Colville_PredictorStack.tif") |> tidyterra::select(-UPL) |>
  tidyterra::rename(DTM = ColvilleDEM,
                    geomorphons = Colville_geomorphons,
                    WIP = WET,
                    CHM = colville_2008_dsm_0)
col_stack$geomorphons <- terra::subst(col_stack$geomorphons, 
                                       from = geomorph_names$value,
                                       to = geomorph_names_sub$value)
levels(col_stack$geomorphons) <- geomorph_names_sub |> distinct()
writeRaster(col_stack, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Col_PredictorStack_Class.tif", overwrite = TRUE)
```

The raster stacks should have the same layers so use `names` to check


```{r}
#| label: start here with post-processed data
hlef_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/HLEF_PredictorStack_Class.tif")
hoh_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Hoh_PredictorStack_Class.tif")
mas_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Mas_PredictorStack_Class.tif")
col_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Col_PredictorStack_Class.tif")

names(hoh_stack) == names(mas_stack) & names(hoh_stack)  == names(col_stack)

# hoh_stack$GEO <- subst(hoh_stack$GEO, from = c(0,1,2,3), c("Eocene", "Miocene", "Pleistocene", "Quaternary")) 
# mas_stack$GEO <- subst(mas_stack$GEO, from = c(0,1,2,3), c("Eocene", "Miocene", "Pleistocene", "Quaternary")) 
# col_stack$GEO <- subst(col_stack$GEO, from = c(0,1,2,3), c("Eocene", "Pleistocene", "PreTertiary", "Quaternary")) 

```


### Point Data

Soil pedon locations contain multiple observations per pedon, one for each horizon.

These data are from `PNW_SOC_spline_processing.qmd`

```{r}
pnw_dat <- read.csv("SOIL CARBON/All_WA/data/dataframes/pnw_spl_dat_recalc_stocks_25cm.csv") |>
    dplyr::select(sample_ID, lower_depth, SOC_stock_recalc_spline, lat, lon) |> 
  rename(SOC_stock_spline = SOC_stock_recalc_spline) |> 
  mutate(site = case_when(lon < -130 ~ "HLEF",
                          lon < -123 & lon > -130 ~ "Hoh",
                          lon < -120 & lon > -122.9 ~ "Mas",
                          lon > -120 ~ "Col"))
str(pnw_dat)

pnw_dat_pts <- vect(pnw_dat, geom = c("lon", "lat"), crs = "EPSG:4326")
plot(pnw_dat_pts, "site")
```

```{r}
pnw_dat_lab <- read.csv("SOIL CARBON/All_WA/data/dataframes/pnw_lab_data.csv") |>
    dplyr::select(sample_ID, bottom, carbon_stock_g_cm2, carbon_perc,
                  pH, Sand, Silt, Clay, SiltClay,lat, lon) |>
  rename("lower_depth" = "bottom") |> 
  mutate(site = case_when(lon < -130 ~ "HLEF",
                          lon < -123 & lon > -130 ~ "Hoh",
                          lon < -120 & lon > -122.9 ~ "Mas",
                          lon > -120 ~ "Col"))

pnw_dat_lab_pts <- vect(pnw_dat_lab, geom = c("lon", "lat"), crs = "EPSG:4326")
str(pnw_dat_lab_pts)
```



### Extraction

The locations of the pedon observations are used to extract all geospatial metrics.

```{r}
pnw_dat_pts |> filter(site == "HLEF") |> project("EPSG:6394") |> 
  terra::extract(x = hlef_stack, bind = TRUE, method = "simple") |>
  writeVector("SOIL CARBON/All_WA/data/points/hlef_pts_6394.gpkg", overwrite = TRUE)
pnw_dat_pts |> filter(site == "Hoh") |> project("EPSG:2855") |> 
  terra::extract(x = hoh_stack, bind = TRUE, method = "simple") |>
  writeVector("SOIL CARBON/All_WA/data/points/hoh_pts_2855.gpkg", overwrite = TRUE)
pnw_dat_pts |> filter(site == "Mas") |> project("EPSG:2856") |> 
  terra::extract(x = mas_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/mas_pts_2856.gpkg", overwrite = TRUE)
pnw_dat_pts |> filter(site == "Col") |> project("EPSG:2855") |> 
  terra::extract(x = col_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/col_pts_2855.gpkg", overwrite = TRUE)

hlef_pts <- vect("SOIL CARBON/All_WA/data/points/hlef_pts_6394.gpkg")
hoh_pts <- vect("SOIL CARBON/All_WA/data/points/hoh_pts_2855.gpkg") 
mas_pts <- vect("SOIL CARBON/All_WA/data/points/mas_pts_2856.gpkg")
col_pts <- vect("SOIL CARBON/All_WA/data/points/col_pts_2855.gpkg")
```


```{r}
pnw_dat_lab_pts |> filter(site == "HLEF") |> project("EPSG:6394") |> 
  terra::extract(x = hlef_stack, bind = TRUE, method = "simple") |>
  writeVector("SOIL CARBON/All_WA/data/points/hlef_lab_pts_6394.gpkg", overwrite = TRUE)
pnw_dat_lab_pts |> filter(site == "Hoh") |> project("EPSG:2855") |> 
  terra::extract(x = hoh_stack, bind = TRUE, method = "simple") |>
  writeVector("SOIL CARBON/All_WA/data/points/hoh_lab_pts_2855.gpkg", overwrite = TRUE)
pnw_dat_lab_pts |> filter(site == "Mas") |> project("EPSG:2856") |> 
  terra::extract(x = mas_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/mas_lab_pts_2856.gpkg", overwrite = TRUE)
pnw_dat_lab_pts |> filter(site == "Col") |> project("EPSG:2855") |> 
  terra::extract(x = col_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/col_lab_pts_2855.gpkg", overwrite = TRUE)

hlef_dat_lab_pts <- vect("SOIL CARBON/All_WA/data/points/hlef_lab_pts_6394.gpkg")
hoh_lab_pts <- vect("SOIL CARBON/All_WA/data/points/hoh_lab_pts_2855.gpkg") 
mas_lab_pts <- vect("SOIL CARBON/All_WA/data/points/mas_lab_pts_2856.gpkg")
col_lab_pts <- vect("SOIL CARBON/All_WA/data/points/col_lab_pts_2855.gpkg")

```

```{r}
glimpse(hlef_pts)
glimpse(hoh_pts)
glimpse(mas_pts)
glimpse(col_pts)

# data.frame(hoh_pts)|> rbind(data.frame(mas_pts)) |> rbind(data.frame(col_pts)) |>
#   rbind(data.frame(pnw_dat_lab_pts)) |> group_by(as.factor(lower_depth)) |> summarise(n = n())
```

```{r}

```

