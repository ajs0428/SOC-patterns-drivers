---
title: "Modeling SOC with Random Forest"
author: "Anthony Stewart"
output:
  html_document:
    df_print: paged
    theme: readable
---

```{css, echo=FALSE}
pre {
  max-height: 300px;
  overflow-y: auto;
}

h1, h3, h4 {
  text-align: center;
}
```


```{r setup, include=FALSE}
library(formatR)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.show = "hold", time_it = TRUE, dpi = 100, message = FALSE, warning = FALSE, results = "hide")
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = T, collapse = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/')
library(rgl)
library(terra)
library(terra)
library(sf)
library(mapview)
library(car)
library(tidyverse)
library(ggeffects)
library(stats)
library(ggcorrplot)
library(RColorBrewer)
library(cowplot)
library(kableExtra)
library(pdp)
library(vip)
library(formatR)
library(ggpubr)
library(grid)
library(gridExtra)
library(ppcor)
library(randomForest)
library(quantregForest)
library(ranger)
library(mlr3verse)
library(mlr3spatial)
library(mlr3extralearners)
library(iml)
library(kernelshap)
library(shapviz)

knitr::knit_hooks$set(webgl = hook_webgl)
rgl::setupKnitr(autoprint = TRUE)
```

```{r include=FALSE}

# Quick R^2 function
r.sq <- function(y,y.fitted){
    res <- y-y.fitted
    1-sum(res^2)/sum((y-mean(y))^2)
}
```


```{r}
wa_dat <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_data_MLR3_RFM_LMM.csv") |>
  dplyr::select(-site, -X, ) |>
  dplyr::mutate(across(where(is.character), as.factor))
test <- read.csv("SOIL CARBON/All_WA/data/dataframes/Test_data.csv") |> 
  dplyr::select(-site, -X, ) |> dplyr::mutate(across(where(is.character), as.factor))
train <- read.csv("SOIL CARBON/All_WA/data/dataframes/Train_data.csv") |> 
  dplyr::select(-site, -X, ) |> dplyr::mutate(across(where(is.character), as.factor))
test.wet <- read.csv("SOIL CARBON/All_WA/data/dataframes/RFM_Test_Wet_data.csv") |> 
  dplyr::select(-site, -X, ) |> dplyr::mutate(across(where(is.character), as.factor))
test.upl <- read.csv("SOIL CARBON/All_WA/data/dataframes/RFM_Test_Upl_data.csv") |> 
  dplyr::select(-site, -X, ) |> dplyr::mutate(across(where(is.character), as.factor))

glimpse(wa_dat)
glimpse(train) 
glimpse(test)
```


## MLR3 Package 

```{r}
RF_task <- mlr3::as_task_regr(train, target = "SOC_stock_spline", id = "rfm")
RF_task$set_col_roles( "sample_ID", "group")
RF_task$feature_names
```


```{r}
#| eval: false
set.seed(11)
instance = fsi(
  task = RF_task,
  learner = lrn("regr.ranger", importance = "permutation"),
  resampling = rsmp("repeated_cv", folds = 5, repeats = 10),
  measures = msr("regr.rmse"),
  terminator = trm("none")
)
instance

fselector = fs("rfe", feature_number = 1, aggregation = "rank")
fselector$optimize(instance)

instance$result_feature_set
instance$result_y
instance$result

saveRDS(instance, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RecursiveFeat_Stocks.rds")
```



```{r}
instance <- readRDS("SOIL CARBON/All_WA/analysis/models/MLR3_RecursiveFeat_Stocks.rds")
RF_task$select(instance$result_feature_set)
RF_lrn <- lrn("regr.ranger",
              num.trees = to_tune(c(1000, 2000)),
              mtry = to_tune(c(4, 8, length(RF_task$feature_names))), 
              max.depth = to_tune(c(4,8,16)),
              min.node.size = to_tune(c(4,8,12)),
              importance = "permutation",
              quantile_response = 0.5,
              quantiles = c(0.025, 0.5, 0.975))
RF_lrn$predict_type = "quantiles"
# GBM_lrn <- lrn("regr.gbm",
#                n.trees = to_tune(c(300, 500, 1000)),
#                interaction.depth = to_tune(c(1,3,5)),
#                bag.fraction = to_tune(c(0.5, 0.75, 0.9)),
#                shrinkage = to_tune(c(	0.0001, 0.001, 0.01, 0.1))
#                )


tune_instance <- ti(task = RF_task,
                    learner = RF_lrn,
                    resampling = rsmp("cv", folds = 5),
                    measures = msrs(c("regr.rsq", "regr.rmse")),
                    terminator = trm("none"))
```


```{r}
#| eval: false
tuner = mlr3tuning::tnr("grid_search", resolution = 10, batch_size = 5)
tuner$param_set
tuner$optimize(tune_instance)
tune_instance$result$learner_param_vals
tuner$print()

saveRDS(tune_instance, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_tune_instance.rds")
```



```{r}
tune_instance <- readRDS(file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_tune_instance.rds")
RF_lrn_tuned = lrn("regr.ranger", 
                        quantile_response = 0.5,
                        quantiles = c(0.025, 0.5, 0.975))
RF_lrn_tuned$predict_type = "quantiles"
RF_lrn_tuned$param_set$values = tune_instance$result_learner_param_vals[[1]]
RF_lrn_tuned$train(RF_task)$model

saveRDS(RF_lrn_tuned, "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_tuned.rds")

```

Resampling
```{r}
#| eval: false
RF_lrn_tuned <- readRDS("SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_tuned.rds")

RF_CV <- rsmp("repeated_cv", repeats = 10, folds = 5)

RF_rr <- mlr3::resample(RF_task, RF_lrn_tuned, RF_CV)
saveRDS(RF_rr, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_resampling.rds")
```


```{r}
RF_rr <- readRDS(file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_resampling.rds")
RF_rr_acc <- RF_rr$score(msrs(c("regr.rmse", "regr.mse", "regr.rsq")))
RF_rr_acc[, .(iteration, regr.rmse, regr.mse, rsq)]
RF_rr$aggregate(msrs(c("regr.rmse", "regr.mse", "regr.rsq")))
autoplot(RF_rr, measure = msr("regr.rsq"), type = "histogram")
autoplot(RF_rr, measure = msr("regr.rmse"), type = "histogram")


write_csv(RF_rr_acc, file = "SOIL CARBON/All_WA/data/dataframes/MLR3_RFM_Ranger_tuned_CV_results.csv")
```


```{r}
RF_rr_acc <- read.csv("SOIL CARBON/All_WA/data/dataframes/MLR3_RFM_Ranger_tuned_CV_results.csv")

measures <- msrs(c("regr.rmse", "regr.mse", "regr.rsq"))
RF_lrn_tuned$predict_newdata(test)$score(measures)
RF_lrn_tuned$predict_newdata(test.wet)$score(measures)
RF_lrn_tuned$predict_newdata(test.upl)$score(measures)
plot(RF_lrn_tuned$predict_newdata(test))
plot(RF_lrn_tuned$predict_newdata(test.wet))
plot(RF_lrn_tuned$predict_newdata(test.upl))


tdf <- data.frame(truth = RF_lrn_tuned$predict_newdata(test)$truth,
           predict = RF_lrn_tuned$predict_newdata(test)$response) #|> filter(truth < 1)
plot(tdf$truth, tdf$predict) + abline(0,1)

caret::R2(pred = tdf$predict,obs = tdf$truth, form = "traditional")
```


### iml model interpretation

```{r}
#| eval: false
RF_task_feats <- RF_task$data(cols = RF_task$feature_names)
RF_task_target <- RF_task$data(cols = RF_task$target_names)

predictor <- iml::Predictor$new(RF_lrn_tuned, data = RF_task_feats, y = RF_task_target)
importance <- FeatureImp$new(predictor, loss = "rmse", n.repetitions = 50)
saveRDS(importance, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_Importance.rds")
saveRDS(predictor, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_Predictor.rds")
```


```{r}
importance <- readRDS("SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_Importance.rds")
predictor <- readRDS("SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_Predictor.rds")
importance$plot()

effect <- FeatureEffect$new(predictor, feature = "WIP", method = "pdp")
effect$plot()
```

### Shapley values 


```{r}
#| eval: false
#| message: false

wa_dat_select <- wa_dat |> 
    dplyr::select(dplyr::all_of(instance$result_feature_set))
wa_dat_select_wet <- wa_dat |> filter(WIP >= 0.50) |>
    dplyr::select(dplyr::all_of(instance$result_feature_set))
wa_dat_select_upl <- wa_dat |> filter(WIP < 0.50) |>
    dplyr::select(dplyr::all_of(instance$result_feature_set))
train_select <- train |>
    dplyr::select(dplyr::all_of(instance$result_feature_set))


rtbx <- wa_dat_select[sample(nrow(wa_dat_select), size = 200), ]
rtbx_wet <- wa_dat_select_wet[sample(nrow(wa_dat_select_wet), size = 100),]
rtbx_upl <- wa_dat_select_upl[sample(nrow(wa_dat_select_upl), size = 100),]

ks <- kernelshap(object = RF_lrn_tuned$model, X = rtbx, bg_X = train_select, parallel = T, )
ks

ks_wet <- kernelshap(object = RF_lrn_tuned$model, X = rtbx_wet, bg_X = train_select, parallel = T)
ks_wet

ks_upl <- kernelshap(object = RF_lrn_tuned$model, X = rtbx_upl, bg_X = train_select, parallel = T)
ks_upl

saveRDS(ks, file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap.rds")
saveRDS(ks_wet, 
        file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap_Wet.rds")
saveRDS(ks_upl, 
        file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap_Upl.rds")
```

```{r}
ks <- readRDS(file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap.rds")
ks_wet <- readRDS(file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap_Wet.rds")
ks_upl <- readRDS(file = "SOIL CARBON/All_WA/analysis/models/MLR3_RFM_Ranger_KernelShap_Upl.rds")
sv_importance(shapviz(ks))
sv_importance(shapviz(ks_wet))
sv_importance(shapviz(ks_upl))
```


```{r}
sv_dependence(shapviz(ks), v = c("lower_depth", "PET_MAP", "WIP", "MAP"), color_var = "LITH")
sv_dependence(shapviz(ks_wet), v = c("lower_depth", "PET_MAP", "WIP", "LITH"), color_var = "CHM")
sv_dependence(shapviz(ks_upl), v = c("lower_depth", "PET_MAP", "MAP", "LITH"), color_var = "WIP")
```


```{r}
#| eval: false
ia_depth <- Interaction$new(predictor, feature = "lower_depth")
ia_map <- Interaction$new(predictor, feature = "PET_MAP")
ia_wip <- Interaction$new(predictor, feature = "WIP")
ia_lith <- Interaction$new(predictor, feature = "LITH")
ia_chm <- Interaction$new(predictor, feature = "CHM")

saveRDS(ia_depth, 
        file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_Depth_plot.rds")
saveRDS(ia_map, 
        file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_MAP_plot.rds")
saveRDS(ia_wip, 
        file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_WIP_plot.rds")
saveRDS(ia_lith, 
        file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_LITH_plot.rds")
saveRDS(ia_chm, 
        file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_CHM_plot.rds")
```


```{r}

ia_depth <- readRDS(file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_Depth_plot.rds")
ia_map <- readRDS(file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_MAP_plot.rds")
ia_wip <- readRDS(file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_WIP_plot.rds")
ia_lith <- readRDS(file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_LITH_plot.rds")
ia_chm <- readRDS(file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Ranger_Interact_CHM_plot.rds")

# ia_depth$results |> data.frame() |> dplyr::mutate(.feature = factor(.feature)) |>
#   dplyr::mutate(.feature = fct_reorder(.feature, desc(.interaction))) |>
#   dplyr::mutate(.feature = case_when(
#                               str_detect(.feature, "lower_depth") ~
#                                 str_replace_all(.feature, "lower_depth", "Depth"),
#                               str_detect(.feature, "LITH:") ~
#                                 str_replace_all(.feature, "LITH:", "Lithology "),
#                               )
#          ) 
# ia_map$results <- ia_map$results |> dplyr::mutate(.feature = factor(.feature)) |>
#   dplyr::mutate(.feature = fct_reorder(.feature, desc(.interaction)))
# ia_wip$results <- ia_wip$results |> dplyr::mutate(.feature = factor(.feature)) |>
#   dplyr::mutate(.feature = fct_reorder(.feature, desc(.interaction)))
# ia_grad$results <- ia_grad$results |> dplyr::mutate(.feature = factor(.feature)) |>
#   dplyr::mutate(.feature = fct_reorder(.feature, desc(.interaction)))



ia_depth_plot <- plot(ia_depth)
ia_map_plot <- plot(ia_map)
ia_wip_plot <- plot(ia_wip)
ia_lith_plot <- plot(ia_lith)
ia_chm_plot <- plot(ia_chm)

ia_depth_plot 
ia_map_plot 
ia_wip_plot 
ia_lith_plot 
ia_chm_plot 

saveRDS(ia_depth_plot, file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_Depth_plot.rds")
saveRDS(ia_map_plot, file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_MAP_plot.rds")
saveRDS(ia_wip_plot, file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_WIP_plot.rds")
saveRDS(ia_lith_plot, file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_LITH_plot.rds")
saveRDS(ia_chm_plot, file = "SOIL CARBON/All_WA/writing/Figures/MLR3_RFM_Interact_CHM_plot.rds")
```


```{r}
#mod_tc <-  get(load("SOIL CARBON/All_WA/analysis/models/RFM_traincontrol.RData"))
qrf.train <- RF_lrn_tuned$predict_newdata(train)$response

qrf.test <- RF_lrn_tuned$predict_newdata(test)$response
qrf.wet.test <- RF_lrn_tuned$predict_newdata(test.wet)$response
qrf.upl.test <- RF_lrn_tuned$predict_newdata(test.upl)$response


plot(qrf.wet.test, test.wet$SOC_stock_spline) + abline(0,1)

r.sq(y.fitted = qrf.test, y = test$SOC_stock_spline)

```


```{r}
qrf_errdf <- data.frame("LandscapeClass" = c("Full", "Wetland", "Upland"), 
    "RFM.R2_OOB" = c(
      RF_rr$aggregate(msrs(c("regr.rsq")))[[1]],
      -999,
      -999
      ),
    "RFM.RMSE_OOB" = c(
      RF_rr$aggregate(msrs(c("regr.rmse")))[[1]],
      -999,
      -999
      ),
    "RFM.R2_test" = c(r.sq(y.fitted = qrf.test, y = (test$SOC_stock_spline)),
                      r.sq(y.fitted = qrf.wet.test, y = (test.wet$SOC_stock_spline)),
                      r.sq(y.fitted = qrf.upl.test, y = (test.upl$SOC_stock_spline))),
    "RFM.RMSE_test" = c(caret::postResample(pred = qrf.test, 
                                            obs = (test$SOC_stock_spline))[[1]],
                      caret::postResample(pred = qrf.wet.test, 
                                          obs = (test.wet$SOC_stock_spline))[[1]],
                      caret::postResample(pred = qrf.upl.test, 
                                          obs = (test.upl$SOC_stock_spline))[[1]])
    )
qrf_errdf

readr::write_csv(qrf_errdf, file = "SOIL CARBON/All_WA/data/dataframes/MLR3_RFM_ErrorDF.csv")
```


```{r}

```

