---
title: "All WA SOC Prediction Mapping"
format:
  html:
    embed-resources: false
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
library(formatR)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.show = "hold", time_it = TRUE, dpi = 100)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = T, collapse = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/')
library(rgl)
library(terra)
library(lme4)
library(MASS)
library(lmerTest)
library(MuMIn)
library(terra)
library(randomForest)
library(sf)
library(ggplot2)
library(ggeffects)
library(merTools)
library(glmnet)
library(stats)
library(ggcorrplot)
library(RColorBrewer)
library(webshot)
library(kableExtra)
library(formatR)
library(dplyr)
library(stringr)


knitr::knit_hooks$set(webgl = hook_webgl)
rgl::setupKnitr(autoprint = TRUE)

terraOptions(
    memfrac = 0.1
)

setGDALconfig("GDAL_PAM_ENABLED", "FALSE")
```

Path to prediction folder

```{r}
pred_path <- "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/"
```

Load in the best model 

```{r}
model_1m <- get(load("SOIL CARBON/All_WA/analysis/models/All_WA_Stocks_Model.RData"))
model_depths <- get(load("SOIL CARBON/All_WA/analysis/models/All_WA_Model7d1_Spline.RData"))
model_RF <- get(load("SOIL CARBON/All_WA/analysis/models/ALl_WA_RandomForest.RData"))
formula(model_1m)
coef(summary(model_1m))
formula(model_depths)
coef(summary(model_depths))
model_RF$call
```

Load SOC Point Data
- now just 1m stocks

```{r}
# hoh_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/hoh_pts_2855.gpkg"))
# mas_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/mas_pts_2856.gpkg"))
# col_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/col_pts_2855.gpkg"))
# 
# wa_dat <- rbind(hoh_dat, mas_dat, col_dat) |> 
#   mutate(
#   GEO = as.factor(GEO), 
#   geomorphons = as.factor(geomorphons),
#   site = as.factor(site),
#   site = forcats::fct_reorder(site, SOC_stock_spline, .fun = "median")) |>
#   dplyr::rename_with(~gsub("_median", "", .x, fixed = TRUE))
# 
# columns_to_exclude <- c("SOC_stock_spline") 
# 
# wa_dat_scale <- wa_dat |> 
#     dplyr::select(sample_ID, lower_depth, SOC_stock_spline, 
#                   site, MAP, GEO, WIP,HLI, CHM) |> 
#     dplyr::mutate(across(
#         dplyr::where(is.numeric) & !all_of(columns_to_exclude),
#                   ~dplyr::case_when(TRUE ~ scale(.))),
#         site = forcats::fct_reorder(site, SOC_stock_spline, .fun = "median")) 

wa_dat <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_SOC_ExtractPreds.csv")
wa_pedons <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_1m_stocks_preds.csv")

wa_dat_scale <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_SOC_ExtractPreds_Scaled.csv")
wa_pedons_scale <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_1m_stocks_preds_scale.csv")

```



Need to get the means and standard deviations of the numeric factor in the dataset to scale the raster input variables

```{r}
columns_to_exclude <- c("SOC_stock_spline")
columns_to_exclude_pedons <- c("SOC_stock_100")

wa_dat_scale_depths_params <- wa_dat |> 
    dplyr::select(sample_ID, SOC_stock_spline, lower_depth, LITH,
                  dev_1000, MAP, WIP,HLI, CHM) |>
    dplyr::summarise(across(dplyr::where(is.numeric) & !all_of(columns_to_exclude),
                            list(mean = mean, sd = sd)))

wa_dat_scale_depths_rfm_params <- wa_dat |> 
    dplyr::summarise(across(dplyr::where(is.numeric) & !all_of(columns_to_exclude),
                            list(mean = mean, sd = sd)))

wa_dat_scale_pedons_params <- wa_pedons |> 
    dplyr::select(sample_ID, SOC_stock_100, LITH,
                  dev_1000, MAP, WIP,HLI, CHM) |>
    dplyr::summarise(across(dplyr::where(is.numeric) & !all_of(columns_to_exclude_pedons),
                            list(mean = mean, sd = sd)))

wa_dat_scale_pedons_wet_params <- wa_pedons |> 
    dplyr::select(sample_ID, SOC_stock_100, LITH,
                  dev_1000, MAP, WIP,HLI, CHM) |>
  filter(WIP >= 0.50) |> 
    dplyr::summarise(across(dplyr::where(is.numeric) & !all_of(columns_to_exclude_pedons),
                            list(mean = mean, sd = sd)))
```


Load in the raster stacks 

```{r}
hoh_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Hoh_PredictorStack_Class.tif") |>
    terra::subset(c("WIP", "MAP", "LITH", "MAT", "CHM", "HLI", "EVI_median", 
                    "dev_1000", "dev_300", "dev_50", 
                    "grad_1000", "grad_300", "grad_50", "MNDWI_median"))
mas_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Mas_PredictorStack_Class.tif") |>
    terra::subset(c("WIP", "MAP", "LITH", "MAT", "CHM", "HLI", "EVI_median", 
                    "dev_1000", "dev_300", "dev_50", 
                    "grad_1000", "grad_300", "grad_50", "MNDWI_median"))
col_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Col_PredictorStack_Class.tif") |>
    terra::subset(c("WIP", "MAP", "LITH", "MAT", "CHM", "HLI", "EVI_median", 
                    "dev_1000", "dev_300", "dev_50", 
                    "grad_1000", "grad_300", "grad_50", "MNDWI_median"))

```


```{r}
#| eval: false

rast_scale_depths_func <- function(stack, path, params) {
    stack_scale <- stack |> 
      tidyterra::rename_with(~gsub("_median", "", .x, fixed = TRUE)) |> 
        tidyterra::mutate(MAP = (MAP - params$MAP_mean)/params$MAP_sd,
                          HLI = (HLI - params$HLI_mean)/params$HLI_sd,
                          WIP = (WIP - params$WIP_mean)/params$WIP_sd,
                          CHM = (CHM - params$CHM_mean)/params$CHM_sd,
                          EVI = (EVI - params$EVI_mean)/params$EVI_sd,
                          MAT = (MAT - params$MAT_mean)/params$MAT_sd,
                          dev_1000 = (dev_1000 - params$dev_1000_mean)/params$dev_1000_sd,
                          dev_300 = (dev_300 - params$dev_300_mean)/params$dev_300_sd,
                          dev_50 = (dev_50 - params$dev_50_mean)/params$dev_50_sd,
                          grad_1000 = (grad_1000 - params$grad_1000_mean)/params$grad_1000_sd,
                          grad_300 = (grad_300 - params$grad_300_mean)/params$grad_300_sd,
                          grad_50 = (grad_50 - params$grad_50_mean)/params$grad_50_sd)
    writeRaster(stack_scale,
                paste0(getwd(), "/", path, deparse(substitute(stack)), "_depths_scale", ".tif"),
                overwrite = TRUE)
    return(stack_scale)
}

rast_scale_pedons_func <- function(stack, path, params) {
    stack_scale <- stack |> 
        tidyterra::mutate(MAP = (MAP - params$MAP_mean)/params$MAP_sd,
                          HLI = (HLI - params$HLI_mean)/params$HLI_sd,
                          WIP = (WIP - params$WIP_mean)/params$WIP_sd,
                          dev_1000 = (dev_1000 - params$dev_1000_mean)/params$dev_1000_sd)|> 
      tidyterra::rename_with(~gsub("_median", "", .x, fixed = TRUE))
    writeRaster(stack_scale, 
                paste0(getwd(), "/", path, deparse(substitute(stack)), "_pedons_scale", ".tif"),
                overwrite = TRUE)
    return(stack_scale)
}

hoh_stack_scale <- rast_scale_depths_func(hoh_stack, pred_path, wa_dat_scale_depths_rfm_params)
mas_stack_scale <- rast_scale_depths_func(mas_stack, pred_path, wa_dat_scale_depths_rfm_params)
col_stack_scale <- rast_scale_depths_func(col_stack, pred_path, wa_dat_scale_depths_rfm_params)

hoh_stack_scale <- rast_scale_pedons_func(hoh_stack, pred_path, wa_dat_scale_pedons_params)
mas_stack_scale <- rast_scale_pedons_func(mas_stack, pred_path, wa_dat_scale_pedons_params)
col_stack_scale <- rast_scale_pedons_func(col_stack, pred_path, wa_dat_scale_pedons_params)



```


```{r}
hoh_stack_depths_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/hoh_stack_depths_scale.tif")
mas_stack_depths_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/mas_stack_depths_scale.tif")
col_stack_depths_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/col_stack_depths_scale.tif")

hoh_stack_pedons_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/hoh_stack_pedons_scale.tif")
mas_stack_pedons_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/mas_stack_pedons_scale.tif")
col_stack_pedons_scale <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/col_stack_pedons_scale.tif")

```

Lithology layer is having problems with `terra` it seems so I'm loading in the vectors and reclassifying

```{r}
hoh_consolidate_lith <- vect("SOIL CARBON/All_WA/data/Vectors/Hoh_lithology_consolidate.shp")
mas_consolidate_lith <- vect("SOIL CARBON/All_WA/data/Vectors/Mas_lithology_consolidate.shp")
col_consolidate_lith <- vect("SOIL CARBON/All_WA/data/Vectors/Col_lithology_consolidate.shp") 
plot(col_consolidate_lith, "LITH")
plot(col_stack_depths_scale$LITH)
```


```{r}

hoh_stack_depths_scale$LITH <- subst(hoh_stack_depths_scale$LITH, from = c(0,1,2,3), c("glacial outwash", "glacial till and drift",
                                                                                     "sedimentary", "unconsolidated"))
mas_stack_depths_scale$LITH <- subst(mas_stack_depths_scale$LITH, from = c(0,1,2,3,4), c("glacial outwash", "glacial till and drift",
                                                                                       "igneous", "sedimentary", "unconsolidated"))
col_stack_depths_scale$LITH <- subst(col_stack_depths_scale$LITH, from = c(0,1,2,3,4,5), c("glacial outwash", "glacial till and drift",
                                                                                         "igneous", "metamorphic", "sedimentary", "unconsolidated")) 

hoh_stack_pedons_scale$LITH <- subst(hoh_stack_pedons_scale$LITH, from = c(0,1,2,3), c("glacial outwash", "glacial till and drift",
                                                                                     "sedimentary", "unconsolidated"))
mas_stack_pedons_scale$LITH <- subst(mas_stack_pedons_scale$LITH, from = c(0,1,2,3,4), c("glacial outwash", "glacial till and drift",
                                                                                       "igneous", "sedimentary", "unconsolidated"))
col_stack_pedons_scale$LITH <- subst(col_stack_pedons_scale$LITH, from = c(0,1,2,3,4,5), c("glacial outwash", "glacial till and drift",
                                                                                         "igneous", "metamorphic", "sedimentary", "unconsolidated"))  


# plot(col_stack_depths_scale$LITH)
# plot(col_stack_pedons_scale$LITH)
```



### Generate a prediction for depths model or 1m stocks model 


Landfire and MNDWI for masks
```{r}
#| eval: false
m <- c(3295, 3299, 9999,
       3767, 3770, 9999,
       3800, 3803, 9999,
       3857, 3857, 9999,
       0, 5000, 0)
rclmat <- matrix(m, ncol=3, byrow=TRUE)

lf_hoh <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/hoh_LANDFIRE.tif")
lf_hoh_urb <- lf_hoh |> terra::classify(rcl = rclmat)
lf_mas <- rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/mashel_LANDFIRE.tif")
lf_mas_urb <- lf_mas |> terra::classify(rcl = rclmat)
lf_col <-rast("SOIL CARBON/All_WA/data/Rasters/NonPredictors/colville_LANDFIRE.tif")
lf_col_urb <- lf_col |> terra::classify(rcl = rclmat)

urb_list <- c("hoh_urban" = lf_hoh_urb, "mas_urban" = lf_mas_urb, "col_urban" = lf_col_urb)

plot(urb_list[[1]])
```

```{r}
stack_masking <- function(stack, mndwi, urban) {
  stack_masked <- mask(stack, mndwi > 0.0, maskvalues = TRUE, updatevalue = NA) |> 
    mask(mask = urban, maskvalues = 9999, updatevalue = NA)
  #writeRaster(stack_masked,  filename = paste0(getwd(), "/", pred_path, deparse(substitute(stack_masked)), "_water_urban_mask", ".tif"), overwrite = TRUE)
  
  return(stack_masked) 
}

wet_stack_masking <- function(stack, mndwi, urban, wip_mask) {
  stack_masked <- mask(stack, wip_mask < 0.50, maskvalues = TRUE, updatevalue = NA) |> 
    mask(mndwi > 0.0, maskvalues = TRUE, updatevalue = NA) |> 
    mask(mask = urban, maskvalues = 9999, updatevalue = NA)
  #writeRaster(stack_masked,  filename = paste0(getwd(), "/", pred_path, deparse(substitute(stack_masked)), "_water_urban_mask", ".tif"), overwrite = TRUE)
  
  return(stack_masked) 
}
```


```{r}
#| eval: false
hoh_stack_depths_mask_scale <- stack_masking(stack = hoh_stack_depths_scale, mndwi = hoh_stack$MNDWI_median, urban = lf_hoh_urb)
mas_stack_depths_mask_scale <- stack_masking(stack = mas_stack_depths_scale, mndwi = mas_stack$MNDWI_median, urban = lf_mas_urb)
col_stack_depths_mask_scale <- stack_masking(stack = col_stack_depths_scale, mndwi = col_stack$MNDWI_median, urban = lf_col_urb)

hoh_stack_pedons_mask_scale <- stack_masking(stack = hoh_stack_pedons_scale, mndwi = hoh_stack$MNDWI_median, urban = lf_hoh_urb)
mas_stack_pedons_mask_scale <- stack_masking(stack = mas_stack_pedons_scale, mndwi = mas_stack$MNDWI_median, urban = lf_mas_urb)
col_stack_pedons_mask_scale <- stack_masking(stack = col_stack_pedons_scale, mndwi = col_stack$MNDWI_median, urban = lf_col_urb)

col_stack_pedons_wet_mask_scale <- wet_stack_masking(stack = col_stack_pedons_scale, mndwi = col_stack$MNDWI_median, urban = lf_col_urb, wip_mask = col_stack$WIP)

writeRaster(hoh_stack_depths_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/hoh_stack_depths_water_urban_mask_scale.tif", overwrite = TRUE)
writeRaster(mas_stack_depths_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/mas_stack_depths_water_urban_mask_scale.tif", overwrite = TRUE)
writeRaster(col_stack_depths_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/col_stack_depths_water_urban_mask_scale.tif", overwrite = TRUE)

writeRaster(hoh_stack_pedons_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/hoh_stack_pedons_water_urban_mask_scale.tif", overwrite = TRUE)
writeRaster(mas_stack_pedons_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/mas_stack_pedons_water_urban_mask_scale.tif", overwrite = TRUE)
writeRaster(col_stack_pedons_mask_scale, "SOIL CARBON/All_WA/data/Rasters/PredictorStacks/col_stack_pedons_water_urban_mask_scale.tif", overwrite = TRUE)


plot(mas_stack_depths_mask_scale$LITH)
plot(mas_stack_pedons_mask_scale$LITH)
```


```{r}
SOC_pred_path <- "SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/"

SOC_pred_func_depths <- function(stack, depths, model, site, path){
  const_df_15 <- data.frame(site = site, 
                                lower_depth = ((15 - wa_dat_scale_depths_params$lower_depth_mean)/wa_dat_scale_depths_params$lower_depth_sd), 
                                stringsAsFactors = TRUE)
      const_df_30 <- data.frame(site = site, 
                                lower_depth = ((30 - wa_dat_scale_depths_params$lower_depth_mean)/wa_dat_scale_depths_params$lower_depth_sd), 
                                stringsAsFactors = TRUE)
      const_df_60 <- data.frame(site = site, 
                                lower_depth = ((60 - wa_dat_scale_depths_params$lower_depth_mean)/wa_dat_scale_depths_params$lower_depth_sd), 
                                stringsAsFactors = TRUE)
      const_df_100 <- data.frame(site = site, 
                                 lower_depth = ((100 - wa_dat_scale_depths_params$lower_depth_mean)/wa_dat_scale_depths_params$lower_depth_sd), 
                                 stringsAsFactors = TRUE)
      const_df_200 <- data.frame(site = site, 
                                 lower_depth = ((200 - wa_dat_scale_depths_params$lower_depth_mean)/wa_dat_scale_depths_params$lower_depth_sd), 
                                 stringsAsFactors = TRUE)

      const_df_list <- list(const_df_15, const_df_30, const_df_60, const_df_100, const_df_200)
      
      depth_num_list <- list(15, 30, 60, 100, 200) 
      
      levels(stack$LITH) <- cats(col_stack_depths_scale$LITH) #has all levels 
      
      if(str_detect(deparse(substitute(model)), "RF") == TRUE){
        print("RF Model")
        for(i in 1:depths){
               terra::predict(stack, model,
                                  const = const_df_list[[i]],
                                  na.rm = TRUE,
                                  cores = (parallel::detectCores()-2),
                                  cpkgs = "randomForest",
                                  filename = paste0(getwd(),
                                                    "/",
                                                    path,
                                                    site, "_",
                                                    "SOCpredict_depths_RF_",
                                                    depth_num_list[[i]],
                                                    ".tif"),
                                  overwrite = TRUE)
          }
      } else {
        print("Linear Model")
        for(i in 1:depths){
               terra::predict(stack, model, #se.fit = TRUE,
                                  const = const_df_list[[i]],
                                  na.rm = TRUE,
                                  re.form = NA, allow.new.levels = TRUE,
                                  cores = (parallel::detectCores()-2),
                                  #cpkgs = "randomForest",
                                  filename = paste0(getwd(),
                                                    "/",
                                                    path,
                                                    site, "_",
                                                    "SOCpredict_depths_",
                                                    depth_num_list[[i]],
                                                    ".tif"),
                                  overwrite = TRUE)
          }
      }
        
}

SOC_pred_func_pedon <- function(stack, model, path, uncertain, site){
  terra::predict(stack, model, #se.fit = TRUE,
                     na.rm = TRUE, 
                     type = "response",
                     allow.new.levels = TRUE,
                     cores = (parallel::detectCores()-2),
                     filename = paste0(getwd(), 
                                       "/", 
                                       path, 
                                       site, "_",
                                       "SOCpredict_pedon_stocks", 
                                       ".tif"),
                     overwrite = TRUE)
}
```


```{r}
#| eval: false


testpt <- terra::buffer(spatSample(mas_stack_depths_scale, 1, as.points = TRUE, na.rm = TRUE), 200)

test <- terra::crop(mas_stack_depths_scale, testpt) |> tidyterra::select(-MNDWI)
plot(test)



```


```{r}
#| eval: false

#test$LITH <- terra::as.factor(test$LITH)

test_pred_depths <- SOC_pred_func_depths(stack = test, model = model_depths, depths = 1, site = "MAS", path = SOC_pred_path) 

test_pred_depths_rf <- SOC_pred_func_depths(stack = test, model = model_RF, depths = 1, site = "MAS", path = SOC_pred_path) 

test_pred_pedon <- SOC_pred_func_pedon(stack = test, model = model_1m, path = SOC_pred_path)

plot(10**rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/SOCpredict_depths_15.tif"))
plot(rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/SOCpredict_depths_RF_15.tif"))
plot(test_pred_pedon)
```



```{r}
#| eval: false
SOC_pred_func_pedon(stack = hoh_stack_pedons_mask_scale, model = model_1m, path = SOC_pred_path, 
                    site = "hoh")
SOC_pred_func_pedon(stack = mas_stack_pedons_mask_scale, model = model_1m, path = SOC_pred_path,
                    site = "mas")
SOC_pred_func_pedon(stack = col_stack_pedons_mask_scale, model = model_1m, path = SOC_pred_path,
                    site = "col")

SOC_pred_func_depths(hoh_stack_depths_mask_scale, model = model_depths, depths = 4, site = "HOH", path = SOC_pred_path)
SOC_pred_func_depths(mas_stack_depths_mask_scale, model = model_depths, depths = 4, site = "MAS", path = SOC_pred_path)
SOC_pred_func_depths(col_stack_depths_mask_scale, model = model_depths, depths = 4, site = "COL", path = SOC_pred_path)

SOC_pred_func_depths(hoh_stack_depths_mask_scale, model = model_RF, depths = 4, site = "HOH", path = SOC_pred_path)
SOC_pred_func_depths(mas_stack_depths_mask_scale, model = model_RF, depths = 4, site = "MAS", path = SOC_pred_path)
SOC_pred_func_depths(col_stack_depths_mask_scale, model = model_RF, depths = 4, site = "COL", path = SOC_pred_path)
```



```{r}

SOC_sum_units_depths <- function(site, depth, model, path){
  stopifnot(is.character(depth))
  depth_list <- list(15, 30, 60, 100, 200)
  stopifnot(as.numeric(depth) %in% depth_list)
  
  depth_remove <- if(as.numeric(depth) < 200){
    depth_list[depth_list>as.numeric(depth)]
  } else {
    9999
  }
  
  filelist <- list.files(path, pattern = "depths", full.names = TRUE, ignore.case = TRUE)
  filelist <- filelist[str_detect(filelist, pattern = paste0("(?i)", site))]
  
  filelist_depth <- filelist[!str_detect(filelist,pattern=as.character(depth_remove))]
  if (model == "RF") {
    print("RF")
    filelist_depth <- filelist_depth[str_detect(filelist_depth, pattern = paste0("(?i)", model))]
    SOC <- rast(filelist_depth) |>
      sum()*100
      writeRaster(SOC, filename = paste0(getwd(),
                                         "/",
                                         path,
                                         tolower(site),
                                         "SOCsum_", model, "_",
                                         depth,
                                         ".tif"), overwrite = TRUE)
  } else {
    print("Linear")
    filelist_depth <- filelist_depth[!str_detect(filelist_depth, pattern = paste0("(?i)", "RF"))]
    SOC <- rast(filelist_depth) |>
      terra::app(fun=function(i) 10**(i)) |> sum()*100
      writeRaster(SOC, filename = paste0(getwd(),
                                         "/",
                                         path,
                                         tolower(site),
                                         "SOCsum_", model, "_",
                                         depth,
                                         ".tif"), overwrite = TRUE)
  }
}


```


```{r}
#| eval: false
SOC_sum_units_depths(site = "hoh", depth = "100", model = "linear", path = SOC_pred_path)
SOC_sum_units_depths(site = "mas", depth = "100", model = "linear",path = SOC_pred_path)
SOC_sum_units_depths(site = "col", depth = "100", model = "linear",path = SOC_pred_path)

SOC_sum_units_depths(site = "hoh", depth = "100", model = "RF", path = SOC_pred_path)
SOC_sum_units_depths(site = "mas", depth = "100", model = "RF",path = SOC_pred_path)
SOC_sum_units_depths(site = "col", depth = "100", model = "RF",path = SOC_pred_path)
```


Surface water mask


```{r}
#| eval: false


SurfaceWater_Mask <- function(mndwi, lyr, path) {
  
  if(str_detect(deparse(substitute(lyr)), "WIP") == TRUE) {
     wipname <-  if((tools::toTitleCase(str_extract(deparse(substitute(lyr)), 
                                                    "hoh|mas|col")) == "Hoh")){
       "Hoh_WIP_Final_2855_Mask.tif"
       } else if((tools::toTitleCase(str_extract(deparse(substitute(lyr)), 
                                                 "hoh|mas|col")) == "Mas")){
     "Mashel_WIP_Final_2856_Mask.tif"
       } else if((tools::toTitleCase(str_extract(deparse(substitute(lyr)), 
                                                "hoh|mas|col")) == "Col")){
      "Colvile_WIP_Final_2855_Mask.tif"
       } else {
       break
       }
    masked <- mask(lyr, mndwi > 0.0 | is.na(mndwi), maskvalues = TRUE, 
                           filename = paste0(paste0(getwd(), 
                                     "/", 
                                     "SOIL CARBON/All_WA/data/Rasters/", 
                                     wipname)), 
                           overwrite = TRUE)
  } else {
    masked <- mask(lyr, mndwi > 0.0 | is.na(mndwi), maskvalues = TRUE, 
                           filename = paste0(paste0(getwd(), 
                                     "/", 
                                     path, 
                                     str_remove_all(deparse(substitute(lyr)), 
                                                    pattern = "_"),
                                     "mask",
                                     ".tif")), 
                           overwrite = TRUE)
  }
}
```


```{r}
#| eval: false

hoh_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = hoh_stack_scale$WIP)
mas_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = mas_stack_scale$WIP)
col_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = col_stack_scale$WIP)

hoh_SOC_sum100mask <- SurfaceWater_Mask(hoh_mndwi, hoh_SOC_sum100, path = SOC_pred_path)
mas_SOC_sum100mask <-SurfaceWater_Mask(mas_mndwi, mas_SOC_sum100, path = SOC_pred_path)
col_SOC_sum100mask <- SurfaceWater_Mask(col_mndwi, col_SOC_sum100, path = SOC_pred_path)

hoh_WIP_mask <- SurfaceWater_Mask(hoh_mndwi, hoh_stack$WIP, path = SOC_pred_path)
mas_WIP_mask <-SurfaceWater_Mask(mas_mndwi, mas_stack$WIP, path = SOC_pred_path)
col_WIP_mask <- SurfaceWater_Mask(col_mndwi, col_stack$WIP, path = SOC_pred_path)
```


```{r}
#| eval: false

hoh_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/hoh__scaleSOCpredict_pedon_stocks.tif")
mas_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/mas__scaleSOCpredict_pedon_stocks.tif")
col_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/col__scaleSOCpredict_pedon_stocks.tif")

hoh_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = hoh_stack_scale$WIP)
mas_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = mas_stack_scale$WIP)
col_mndwi <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_spectral.tif", lyr = "MNDWI_median") |> 
  resample(y = col_stack_scale$WIP)

hoh_SOC_pedon_mask <- SurfaceWater_Mask(hoh_mndwi, hoh_1m_pedon, path = SOC_pred_path)
mas_SOC_pedon_mask <-SurfaceWater_Mask(mas_mndwi, mas_1m_pedon, path = SOC_pred_path)
col_SOC_pedon_mask <- SurfaceWater_Mask(col_mndwi, col_1m_pedon, path = SOC_pred_path)

hoh_WIP_mask <- SurfaceWater_Mask(hoh_mndwi, hoh_stack$WIP, path = SOC_pred_path)
mas_WIP_mask <-SurfaceWater_Mask(mas_mndwi, mas_stack$WIP, path = SOC_pred_path)
col_WIP_mask <- SurfaceWater_Mask(col_mndwi, col_stack$WIP, path = SOC_pred_path)

```


```{r}
hoh_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/hoh_SOCpredict_pedon_stocks.tif")
mas_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/mas_SOCpredict_pedon_stocks.tif")
col_1m_pedon <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/col_SOCpredict_pedon_stocks.tif")

hoh_1m_linear <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/hohSOCsum_linear_100.tif")
mas_1m_linear <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/masSOCsum_linear_100.tif")
col_1m_linear <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/colSOCsum_linear_100.tif")

hoh_1m_RF <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/hohSOCsum_RF_100.tif")
mas_1m_RF <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/masSOCsum_RF_100.tif")
col_1m_RF <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/colSOCsum_RF_100.tif")

hoh_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Hoh_WIP_Final_2855_Mask.tif", lyrs = "WIP")
mas_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Mashel_WIP_Final_2856_Mask.tif", lyrs = "WIP")
col_wip <- rast("SOIL CARBON/All_WA/data/Rasters/Colville_WIP_Final_2855_Mask.tif", lyrs = "WIP")

soc_list <- c("hoh_pedon" = hoh_1m_pedon, "mas_pedon" = mas_1m_pedon, "col_pedon" = col_1m_pedon,
              "hoh_linear" = hoh_1m_linear, "mas_linear" = mas_1m_linear, "col_linear" = col_1m_linear,
              "hoh_RF" = hoh_1m_RF, "mas_RF" = mas_1m_RF, "col_RF" = col_1m_RF)
wip_list <- c("hoh_wip" = hoh_wip, "mas_wip" = mas_wip, "col_wip" = col_wip)

soc_list[str_detect(names(soc_list), "hoh_pedon")]


```

Masking the parameter space

```{r}
#| eval: false
ps_df <- data.frame(param = NA, min = NA, max = NA, sd = NA, mean = NA)
for(i in 1:ncol(wa_dat_scale)){
  if(is.numeric(wa_dat_scale[[i]]) == TRUE){
    ps_df[i,1] <- colnames(wa_dat_scale)[i]
    ps_df[i,2] <- min(wa_dat_scale[[i]])
    ps_df[i,3] <- max(wa_dat_scale[[i]])
    ps_df[i,4] <- sd(wa_dat_scale[[i]])
    ps_df[i,5] <- round(mean(wa_dat_scale[[i]]), 4)
  } else {
    next
  }
}
ps_df <- ps_df |> na.omit()

hoh_SOC_sum100maskmap <- mask(hoh_SOC_sum100mask, hoh_stack_scale$MAP > 2, maskvalues = TRUE, updatevalue = NA) 
plot(hoh_SOC_sum100maskmap)
```



Calculate SOC stocks 

```{r}
C_map_simp <- function(C_map){
    name <- str_match(terra::sources(C_map), "(?<=/)[^/]*(?=\\.tif)") 
    gt <- (C_map > -999)
    cell_size <- cellSize(gt, unit = "ha") |> mask(mask = gt)
    carbon_cell <- C_map*cellSize(gt, unit = "ha") # carbon in Mg per cell which is then added up 
    
    area_tot <- sum(values(cell_size), na.rm = T)
    C_mean <- mean(values(C_map), na.rm = T) #mean value of all values of Mg/ha cells
    TotalC_sum <- sum(values(carbon_cell), na.rm =T)
    
    
    return(data.frame("Name" = name, 
                      "Total_area" = area_tot, 
                      "AverageSOC_Mgha" = C_mean, 
                      "Total_Carbon_Tg" = TotalC_sum/1e6,
                      stringsAsFactors = T))
}

C_map_wet_fractions <- function(C_map, WIP){
    name <- name <- str_match(terra::sources(C_map), "(?<=/)[^/]*(?=\\.tif)") 
    gt <- (C_map > -999)
    WIP_wetupl <- (WIP >= 0.50)
    #WIP_mid <- (WIP >= 0.25 & WIP <= 0.75)
    
    C_map_wet <- mask(C_map, mask = WIP_wetupl, maskvalues = FALSE)
    C_map_upl <- mask(C_map, mask = WIP_wetupl, maskvalues = TRUE)
    #C_map_mid <- mask(C_map, mask = WIP_mid, maskvalues = FALSE)
    
    cell_size_all <- cellSize(gt, unit = "ha") |> mask(mask = gt)
    cell_size_wet <- cellSize(gt, unit = "ha") |> mask(mask = C_map_wet)
    cell_size_upl <- cellSize(gt, unit = "ha") |> mask(mask = C_map_upl)
    #cell_size_mid <- cellSize(gt, unit = "ha") |> mask(mask = C_map_mid)
    
    carbon_cell_all <- C_map*cell_size_all # carbon in Mg per cell which is then added up 
    carbon_cell_wet <- C_map_wet*cell_size_wet # carbon in Mg per cell which is then added up 
    carbon_cell_upl <- C_map_upl*cell_size_upl # carbon in Mg per cell which is then added up 
    #carbon_cell_mid <- C_map_mid*cell_size_mid # carbon in Mg per cell which is then added up 
    
    area_tot <- sum(values(cell_size_all), na.rm = T)
    area_wet <- sum(values(cell_size_wet), na.rm = T)
    area_upl <- sum(values(cell_size_upl), na.rm = T)
    #area_mid <- sum(values(cell_size_mid), na.rm = T)
    
    C_mean_all <- mean(values(C_map), na.rm = T) #mean value of all values of Mg/ha cells
    C_mean_wet <- mean(values(C_map_wet), na.rm = T)
    C_mean_upl <- mean(values(C_map_upl), na.rm = T)
    #C_mean_mid <- mean(values(C_map_mid), na.rm = T)
    
    TotalC_sum <- sum(values(carbon_cell_all), na.rm =T)
    TotalC_sum_wet <- sum(values(carbon_cell_wet), na.rm =T)
    TotalC_sum_upl <- sum(values(carbon_cell_upl), na.rm =T)
    #TotalC_sum_mid <- sum(values(carbon_cell_mid), na.rm =T)
    
    return(data.frame("Name" = c(name, paste0(name, "_wet"), paste0(name, "_upl")), 
                      "Total_area" = c(area_tot, area_wet, area_upl),
                      "AverageSOC_Mgha" = c(C_mean_all, C_mean_wet, C_mean_upl), 
                      "Total_Carbon_Tg" = c(TotalC_sum/1e6, TotalC_sum_wet/1e6, 
                                            TotalC_sum_upl/1e6),
                      stringsAsFactors = T))
}
```

```{r}
soc_map_sum_classes <- function(list_of_soc, list_of_wip){
  SOC_df <- data.frame("Name" = NA, 
                      "Total_area" = NA,
                      "AverageSOC_Mgha" = NA, 
                      "Total_Carbon_Tg" = NA,
                      stringsAsFactors = T)
  for(i in 1:length(list_of_soc)){
    #print(names(list_of_soc[i]))
    wip <- list_of_wip[str_detect(names(list_of_wip), str_sub(names(list_of_soc[i]), 1, 3)     )][[1]]
    #print(names(wip))
    Cmap_frac_df <- C_map_wet_fractions(C_map = list_of_soc[[i]], wip)
    SOC_df <- rbind(SOC_df, Cmap_frac_df)
  }
  return(SOC_df)
}


```


```{r}
#| eval: false
mappedSOC_1m_depths_sum_df <- soc_map_sum_classes(soc_list, wip_list)

mappedSOC_1m_depths_sum_df
readr::write_csv(mappedSOC_1m_depths_sum_df, "SOIL CARBON/All_WA/data/dataframes/All_WA_MapSOC_wetupl_1m.csv")
```




```{r}
#| eval: false
SOC_df <- data.frame(Name = character(), Total_area = double(), AverageSOC_Mgha = double(), total_Carbon_Tg = double())

Map_SOC_func <- function(path, sumDepth){
  filelist <-list.files(path, pattern = sumDepth, full.names = TRUE)
  soc_list <- list()
  for(i in 1:length(filelist)){
    r <- rast(filelist[[i]])
    soc_list[[i]] <-  C_map_simp(r)
    #plot(r)
  }
  SOC_df <- rbind(soc_list)
  return(SOC_df)
}

testdf <- Map_SOC_func(SOC_pred_path, "1mpedonmask")

```


```{r}
#| eval: false
hoh_100soc <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/hohSOCsum100mask.tif")
mas_100soc <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/masSOCsum100mask.tif")
col_100soc <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/colSOCsum100mask.tif")

SOC_df <- rbind(C_map_simp(hoh_100soc),
C_map_simp(mas_100soc),
C_map_simp(col_100soc))

readr::write_csv(SOC_df, "SOIL CARBON/All_WA/data/dataframes/All_WA_MapSOC100mask.csv")
```


```{r}

SOC_df <- readr::read_csv("SOIL CARBON/All_WA/data/dataframes/All_WA_MapSOC_wetupl_1m.csv")


SOC_df_form <- SOC_df |> 
  na.omit() |> 
  mutate(Name = case_when(
  str_detect(Name, "hoh") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Hoh Wet Pedon", 
  str_detect(Name, "mas") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Mas Wet Pedon",  
  str_detect(Name, "col") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Col Wet Pedon", 
  str_detect(Name, "hoh") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Hoh Wet LMM", 
  str_detect(Name, "mas") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Mas Wet LMM",  
  str_detect(Name, "col") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Col Wet LMM",
  str_detect(Name, "hoh") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Hoh Wet RF", 
  str_detect(Name, "mas") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Mas Wet RF",  
  str_detect(Name, "col") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Col Wet RF",
  
  str_detect(Name, "hoh") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Hoh Upl Pedon", 
  str_detect(Name, "mas") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Mas Upl Pedon",  
  str_detect(Name, "col") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Col Upl Pedon", 
  str_detect(Name, "hoh") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Hoh Upl LMM", 
  str_detect(Name, "mas") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Mas Upl LMM",  
  str_detect(Name, "col") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Col Upl LMM",
  str_detect(Name, "hoh") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Hoh Upl RF", 
  str_detect(Name, "mas") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Mas Upl RF",  
  str_detect(Name, "col") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Col Upl RF",
  
  str_detect(Name, "SOCsum_linear_100") ~ str_replace(Name, "SOCsum_linear_100", " Full LMM"),
  str_detect(Name, "SOCpredict_pedon_stocks") ~ str_replace(Name, "_SOCpredict_pedon_stocks", " Full Pedon"),
  str_detect(Name, "SOCsum_RF_100") ~ str_replace(Name, "SOCsum_RF_100", " Full RF"),
  .default = Name),
  Name = tools::toTitleCase(Name),
       Total_area = signif(Total_area, digits = 5),
       AverageSOC_Mgha = signif(AverageSOC_Mgha, digits = 3),
       Total_Carbon_Tg = signif(Total_Carbon_Tg, digits = 3)) |> 
  arrange(-desc(Name)) |> 
  rename("Study Area" = Name,
           "Total Area (ha)" = Total_area,
           "Mean SOC Stock (Mg ha-1)" = AverageSOC_Mgha,
           "Total SOC Stock (Tg)" = Total_Carbon_Tg) #|> 
  #readr::write_csv("SOIL CARBON/All_WA/data/dataframes/All_WA_MapSOC100mask_format.csv")


hoh_area <- SOC_df[SOC_df$Name == "hoh_SOCpredict_pedon_stocks", "Total_area"][2,1][[1]]
mas_area <- SOC_df[SOC_df$Name == "mas_SOCpredict_pedon_stocks", "Total_area"][2,1][[1]]
col_area <- SOC_df[SOC_df$Name == "col_SOCpredict_pedon_stocks", "Total_area"][2,1][[1]]
hoh_TotSOC_pedons <- SOC_df[SOC_df$Name == "hoh_SOCpredict_pedon_stocks", "Total_Carbon_Tg"][2,1][[1]]
mas_TotSOC_pedons <- SOC_df[SOC_df$Name == "mas_SOCpredict_pedon_stocks", "Total_Carbon_Tg"][2,1][[1]]
col_TotSOC_pedons <- SOC_df[SOC_df$Name == "col_SOCpredict_pedon_stocks", "Total_Carbon_Tg"][2,1][[1]]
hoh_TotSOC_linear <- SOC_df[SOC_df$Name == "hohSOCsum_linear_100", "Total_Carbon_Tg"][2,1][[1]]
mas_TotSOC_linear <- SOC_df[SOC_df$Name == "masSOCsum_linear_100", "Total_Carbon_Tg"][2,1][[1]]
col_TotSOC_linear <- SOC_df[SOC_df$Name == "colSOCsum_linear_100", "Total_Carbon_Tg"][2,1][[1]]
hoh_TotSOC_RF <- SOC_df[SOC_df$Name == "hohSOCsum_RF_100", "Total_Carbon_Tg"][2,1][[1]]
mas_TotSOC_RF <- SOC_df[SOC_df$Name == "masSOCsum_RF_100", "Total_Carbon_Tg"][2,1][[1]]
col_TotSOC_RF <- SOC_df[SOC_df$Name == "colSOCsum_RF_100", "Total_Carbon_Tg"][2,1][[1]]

SOC_perc_df <- SOC_df |> 
  na.omit() |> 
  mutate(Perc_Area = case_when(
  str_detect(Name, "hoh")  ~ Total_area/hoh_area,
  str_detect(Name, "mas")  ~ Total_area/mas_area,
  str_detect(Name, "col")  ~ Total_area/col_area),
  Perc_TotSOC = case_when(
  str_detect(Name, "hoh") & str_detect(Name, "pedon")  ~ Total_Carbon_Tg/hoh_TotSOC_pedons,
  str_detect(Name, "mas") & str_detect(Name, "pedon")  ~ Total_Carbon_Tg/mas_TotSOC_pedons,
  str_detect(Name, "col") & str_detect(Name, "pedon")  ~ Total_Carbon_Tg/col_TotSOC_pedons,
  str_detect(Name, "hoh") & str_detect(Name, "linear")  ~ Total_Carbon_Tg/hoh_TotSOC_linear,
  str_detect(Name, "mas") & str_detect(Name, "linear")  ~ Total_Carbon_Tg/mas_TotSOC_linear,
  str_detect(Name, "col") & str_detect(Name, "linear")  ~ Total_Carbon_Tg/col_TotSOC_linear,
  str_detect(Name, "hoh") & str_detect(Name, "RF")  ~ Total_Carbon_Tg/hoh_TotSOC_RF,
  str_detect(Name, "mas") & str_detect(Name, "RF")  ~ Total_Carbon_Tg/mas_TotSOC_RF,
  str_detect(Name, "col") & str_detect(Name, "RF")  ~ Total_Carbon_Tg/col_TotSOC_RF)) |> 
  mutate(Name = case_when(
  str_detect(Name, "hoh") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Hoh Wet Pedon", 
  str_detect(Name, "mas") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Mas Wet Pedon",  
  str_detect(Name, "col") & str_detect(Name, "pedon") & str_detect(Name, "wet") ~ "Col Wet Pedon", 
  str_detect(Name, "hoh") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Hoh Wet LMM", 
  str_detect(Name, "mas") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Mas Wet LMM",  
  str_detect(Name, "col") & str_detect(Name, "linear") & str_detect(Name, "wet") ~ "Col Wet LMM",
  str_detect(Name, "hoh") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Hoh Wet RF", 
  str_detect(Name, "mas") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Mas Wet RF",  
  str_detect(Name, "col") & str_detect(Name, "RF") & str_detect(Name, "wet") ~ "Col Wet RF",
  
  str_detect(Name, "hoh") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Hoh Upl Pedon", 
  str_detect(Name, "mas") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Mas Upl Pedon",  
  str_detect(Name, "col") & str_detect(Name, "pedon") & str_detect(Name, "upl") ~ "Col Upl Pedon", 
  str_detect(Name, "hoh") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Hoh Upl LMM", 
  str_detect(Name, "mas") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Mas Upl LMM",  
  str_detect(Name, "col") & str_detect(Name, "linear") & str_detect(Name, "upl") ~ "Col Upl LMM",
  str_detect(Name, "hoh") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Hoh Upl RF", 
  str_detect(Name, "mas") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Mas Upl RF",  
  str_detect(Name, "col") & str_detect(Name, "RF") & str_detect(Name, "upl") ~ "Col Upl RF",
  
  str_detect(Name, "SOCsum_linear_100") ~ str_replace(Name, "SOCsum_linear_100", " Full LMM"),
  str_detect(Name, "SOCpredict_pedon_stocks") ~ str_replace(Name, "_SOCpredict_pedon_stocks", " Full Pedon"),
  str_detect(Name, "SOCsum_RF_100") ~ str_replace(Name, "SOCsum_RF_100", " Full RF"),
  .default = Name)) |> 
  #mutate(Name = tolower(Name)) |> 
  rename("Study Area" = Name,
           "Total Area (ha)" = Total_area,
           "Mean SOC Stock (Mg ha-1)" = AverageSOC_Mgha,
           "Total SOC Stock (Tg)" = Total_Carbon_Tg)

readr::write_csv(SOC_perc_df, "SOIL CARBON/All_WA/data/dataframes/All_WA_MapSOC100mask_perc_format.csv")


```

### Uhran et al 

```{r eval=FALSE}
col_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/ColvilleHUC_2855.shp") 
mas_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/Mashel_HUC12_2856.shp")
hoh_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/HOH_POLYGON_711.shp")
path <- "SOIL CARBON/All_WA/data/Rasters/"

CONUS_NWCA_Mean <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Mean.tif")
CONUS_NWCA_Max <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Max.tif")
CONUS_NWCA_Min <- rast("NWCA Data/CONUS_Stock_Nov_20/CONUS_Full_Stock_Max.tif")

NWCA_extract <- function(CONUS_NWCA_raster, studyarea, ref_raster, path, type){
  name <- paste0(str_extract(deparse(substitute(studyarea)), "hoh|mas|col"),
                 "_", 
                 str_extract(deparse(substitute(CONUS_NWCA_raster)), "Min|Max|Mean"))
  type <- tools::toTitleCase(type)
  
  studyarea_prj <- project(studyarea, CONUS_NWCA_raster)
  
  NWCA <- crop(CONUS_NWCA_raster, studyarea_prj, mask = TRUE) |>
  project(y = ref_raster, threads = TRUE,
          filename = paste0(path, "NonPredictors/", name, "_NWCA_Full_", type, ".tif"),
          overwrite = TRUE)
  return(NWCA)
}

hoh_NWCA <- NWCA_extract(CONUS_NWCA_Mean, hoh_studyarea, hoh_stack$WIP, path, "Mean")
mas_NWCA <- NWCA_extract(CONUS_NWCA_Mean, mas_studyarea, mas_stack$WIP, path, "Mean")
col_NWCA <- NWCA_extract(CONUS_NWCA_Mean, col_studyarea, col_stack$WIP, path, "Mean")

hoh_NWCAmax <- NWCA_extract(CONUS_NWCA_Max, hoh_studyarea, hoh_stack$WIP, path, "Max")
mas_NWCAmax <- NWCA_extract(CONUS_NWCA_Max, mas_studyarea, mas_stack$WIP, path, "Max")
col_NWCAmax <- NWCA_extract(CONUS_NWCA_Max, col_studyarea, col_stack$WIP, path, "Max")

hoh_NWCAmin <- NWCA_extract(CONUS_NWCA_Min, hoh_studyarea, hoh_stack$WIP, path, "Min")
mas_NWCAmin <- NWCA_extract(CONUS_NWCA_Min, mas_studyarea, mas_stack$WIP, path, "Min")
col_NWCAmin <- NWCA_extract(CONUS_NWCA_Min, col_studyarea, col_stack$WIP, path, "Min")


```

```{r}
NWCA_df <- rbind(C_map_simp(hoh_NWCA/100),
      C_map_simp(mas_NWCA/100),
      C_map_simp(col_NWCA/100))

NWCA_df <- NWCA_df |> mutate(Name = c("Hoh NWCA", "Mas NWCA", "Col NWCA"))

readr::write_csv(NWCA_df, "SOIL CARBON/All_WA/data/dataframes/NWCA_SOC_C_map_simp.csv")

```

### Uncertainty from Bootstrapping

```{r}
boot_pedon_maps <- function(boots = 100, data, model, stack, path){
    set.seed(randSeed)
    bootData = as.data.frame(splitstackshape::stratified(hoh_dat, group = "LITHOL", 
                                                         c("alluvium_marine_water" = 5, 
                                                           "glac_drift"= 12, 
                                                           "MioEo"=3, 
                                                           "till_outwash"= 16), replace = TRUE))
    
    # Fit a Hoh SOC model 
    modBoot <- lmer(formula = sqrt(SOC_stock_30) ~ WIP + (1|LITHOL),
                    data    = bootData,
                    REML    = F)
    #modBoot <- glm(SOC_stock_100 ~ WIP + LITHOL, family = Gamma(link = "log"), data = bootData)

    #Predict onto raster
            pred_kFold <- terra::predict(stack,
                                  mod_kFold,
                                  type = "response",
                                  na.rm = TRUE,
                                  allow.new.levels = TRUE,
                                  cores = (parallel::detectCores()-2),
                                  filename = paste0(getwd(), 
                                       "/", 
                                       path,  
                                       stringr::str_remove(deparse(substitute(stack)), "stack"),
                                       "SOCpredict_pedon_kFold_rep_", i, "_kf", j,  
                                       ".tif"),
                                        overwrite = TRUE)
        
}

```

```{r}
path_uncert <- "SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/kFold_Uncertainty/"

kFoldCV_pedon_maps(data = wa_stocks_scale, model = model, stack = test, path = path_uncert)
```

```{r}
ulist <- list.files(path_uncert, pattern = ".tif", full.names = TRUE)
rast(ulist)

c_interval <- terra::app(rast(ulist), function(x){
    quantile(x, probs = c(0.025, 0.975), na.rm = T)
}, cores = (parallel::detectCores()-2), filename = paste0(path_uncert, "test95_PI.tif"), overwrite = T)

c_interval <- rast("SOIL CARBON/All_WA/data/Rasters/SOC_Predictions/kFold_Uncertainty/test95_PI.tif")
plot(c_interval)
```

```{r}
wa_geology <- vect("WA_Geo/WA_Geology_100K.gpkg") #|> tidyterra::select(GEOLOGIC_AGE)
#gu <- vect("GlobalUnconsolidate/Boerker_et_al_GUM_v1.0/GUM_v1.0/GUM_v1.0.shp")
hoh_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/HOH_POLYGON_711.shp")
col_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/ColvilleHUC_2855.shp") 
mas_studyarea <- vect("SOIL CARBON/All_WA/data/Vectors/Mashel_HUC12_2856.shp")
t <- crop(wa_geology, project(mas_studyarea, wa_geology)) 

t.lith <- t |> tidyterra::mutate(lith = case_when(str_detect(LITHOLOGY, "outwash") ~ "outwash",
                                                  str_detect(LITHOLOGY, "drift") ~ "drift",
                                                  str_detect(LITHOLOGY, "till") ~ "till",
            .default = "other"))
plot(t.lith, "lith")
```

